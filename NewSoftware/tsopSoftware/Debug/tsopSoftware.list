
tsopSoftware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bb0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001c70  08001c70  00011c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ca0  08001ca0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001ca0  08001ca0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ca0  08001ca0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ca0  08001ca0  00011ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ca4  08001ca4  00011ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001ca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08001cb4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08001cb4  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004a49  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001001  00000000  00000000  00024a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000540  00000000  00000000  00025a80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004a8  00000000  00000000  00025fc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016bfe  00000000  00000000  00026468  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004fd8  00000000  00000000  0003d066  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000824a6  00000000  00000000  0004203e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c44e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001168  00000000  00000000  000c4560  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001c58 	.word	0x08001c58

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001c58 	.word	0x08001c58

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
//		return sqrt(x * x + y * y);
//	return sqrt(-(x * x + y * y));
//}

int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 f9f3 	bl	8000610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f813 	bl	8000254 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */
  MX_GPIO_Init();
 800022e:	f000 f88b 	bl	8000348 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000232:	f000 f84f 	bl	80002d4 <MX_SPI1_Init>
//	ang = (uint8_t)getAngle(getX(data), getY(data));
//	distance = (uint8_t)getDist(getX(data), getY(data));
//
//	dataToSend[0] = ang;
//    dataToSend[1] = distance;
    dts = 3;
 8000236:	1dfb      	adds	r3, r7, #7
 8000238:	2203      	movs	r2, #3
 800023a:	701a      	strb	r2, [r3, #0]


	HAL_SPI_Transmit(&hspi1, dts, 1, 300);
 800023c:	1dfb      	adds	r3, r7, #7
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	0019      	movs	r1, r3
 8000242:	2396      	movs	r3, #150	; 0x96
 8000244:	005b      	lsls	r3, r3, #1
 8000246:	4802      	ldr	r0, [pc, #8]	; (8000250 <main+0x30>)
 8000248:	2201      	movs	r2, #1
 800024a:	f001 fa17 	bl	800167c <HAL_SPI_Transmit>
    dts = 3;
 800024e:	e7f2      	b.n	8000236 <main+0x16>
 8000250:	20000028 	.word	0x20000028

08000254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000254:	b590      	push	{r4, r7, lr}
 8000256:	b093      	sub	sp, #76	; 0x4c
 8000258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025a:	2414      	movs	r4, #20
 800025c:	193b      	adds	r3, r7, r4
 800025e:	0018      	movs	r0, r3
 8000260:	2334      	movs	r3, #52	; 0x34
 8000262:	001a      	movs	r2, r3
 8000264:	2100      	movs	r1, #0
 8000266:	f001 fcef 	bl	8001c48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	0018      	movs	r0, r3
 800026e:	2310      	movs	r3, #16
 8000270:	001a      	movs	r2, r3
 8000272:	2100      	movs	r1, #0
 8000274:	f001 fce8 	bl	8001c48 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000278:	0021      	movs	r1, r4
 800027a:	187b      	adds	r3, r7, r1
 800027c:	2202      	movs	r2, #2
 800027e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000280:	187b      	adds	r3, r7, r1
 8000282:	2201      	movs	r2, #1
 8000284:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000286:	187b      	adds	r3, r7, r1
 8000288:	2210      	movs	r2, #16
 800028a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800028c:	187b      	adds	r3, r7, r1
 800028e:	2200      	movs	r2, #0
 8000290:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000292:	187b      	adds	r3, r7, r1
 8000294:	0018      	movs	r0, r3
 8000296:	f000 fc59 	bl	8000b4c <HAL_RCC_OscConfig>
 800029a:	1e03      	subs	r3, r0, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800029e:	f000 f8cd 	bl	800043c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2207      	movs	r2, #7
 80002a6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	2200      	movs	r2, #0
 80002ac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	2200      	movs	r2, #0
 80002b2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	2200      	movs	r2, #0
 80002b8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2100      	movs	r1, #0
 80002be:	0018      	movs	r0, r3
 80002c0:	f000 ffca 	bl	8001258 <HAL_RCC_ClockConfig>
 80002c4:	1e03      	subs	r3, r0, #0
 80002c6:	d001      	beq.n	80002cc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002c8:	f000 f8b8 	bl	800043c <Error_Handler>
  }
}
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	46bd      	mov	sp, r7
 80002d0:	b013      	add	sp, #76	; 0x4c
 80002d2:	bd90      	pop	{r4, r7, pc}

080002d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002d8:	4b19      	ldr	r3, [pc, #100]	; (8000340 <MX_SPI1_Init+0x6c>)
 80002da:	4a1a      	ldr	r2, [pc, #104]	; (8000344 <MX_SPI1_Init+0x70>)
 80002dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80002de:	4b18      	ldr	r3, [pc, #96]	; (8000340 <MX_SPI1_Init+0x6c>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002e4:	4b16      	ldr	r3, [pc, #88]	; (8000340 <MX_SPI1_Init+0x6c>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80002ea:	4b15      	ldr	r3, [pc, #84]	; (8000340 <MX_SPI1_Init+0x6c>)
 80002ec:	22c0      	movs	r2, #192	; 0xc0
 80002ee:	0092      	lsls	r2, r2, #2
 80002f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002f2:	4b13      	ldr	r3, [pc, #76]	; (8000340 <MX_SPI1_Init+0x6c>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002f8:	4b11      	ldr	r3, [pc, #68]	; (8000340 <MX_SPI1_Init+0x6c>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80002fe:	4b10      	ldr	r3, [pc, #64]	; (8000340 <MX_SPI1_Init+0x6c>)
 8000300:	2200      	movs	r2, #0
 8000302:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000304:	4b0e      	ldr	r3, [pc, #56]	; (8000340 <MX_SPI1_Init+0x6c>)
 8000306:	2200      	movs	r2, #0
 8000308:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800030a:	4b0d      	ldr	r3, [pc, #52]	; (8000340 <MX_SPI1_Init+0x6c>)
 800030c:	2200      	movs	r2, #0
 800030e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000310:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <MX_SPI1_Init+0x6c>)
 8000312:	2200      	movs	r2, #0
 8000314:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000316:	4b0a      	ldr	r3, [pc, #40]	; (8000340 <MX_SPI1_Init+0x6c>)
 8000318:	2207      	movs	r2, #7
 800031a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800031c:	4b08      	ldr	r3, [pc, #32]	; (8000340 <MX_SPI1_Init+0x6c>)
 800031e:	2200      	movs	r2, #0
 8000320:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000322:	4b07      	ldr	r3, [pc, #28]	; (8000340 <MX_SPI1_Init+0x6c>)
 8000324:	2200      	movs	r2, #0
 8000326:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000328:	4b05      	ldr	r3, [pc, #20]	; (8000340 <MX_SPI1_Init+0x6c>)
 800032a:	0018      	movs	r0, r3
 800032c:	f001 f8ee 	bl	800150c <HAL_SPI_Init>
 8000330:	1e03      	subs	r3, r0, #0
 8000332:	d001      	beq.n	8000338 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000334:	f000 f882 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000338:	46c0      	nop			; (mov r8, r8)
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	46c0      	nop			; (mov r8, r8)
 8000340:	20000028 	.word	0x20000028
 8000344:	40013000 	.word	0x40013000

08000348 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000348:	b590      	push	{r4, r7, lr}
 800034a:	b089      	sub	sp, #36	; 0x24
 800034c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034e:	240c      	movs	r4, #12
 8000350:	193b      	adds	r3, r7, r4
 8000352:	0018      	movs	r0, r3
 8000354:	2314      	movs	r3, #20
 8000356:	001a      	movs	r2, r3
 8000358:	2100      	movs	r1, #0
 800035a:	f001 fc75 	bl	8001c48 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800035e:	4b34      	ldr	r3, [pc, #208]	; (8000430 <MX_GPIO_Init+0xe8>)
 8000360:	695a      	ldr	r2, [r3, #20]
 8000362:	4b33      	ldr	r3, [pc, #204]	; (8000430 <MX_GPIO_Init+0xe8>)
 8000364:	2180      	movs	r1, #128	; 0x80
 8000366:	03c9      	lsls	r1, r1, #15
 8000368:	430a      	orrs	r2, r1
 800036a:	615a      	str	r2, [r3, #20]
 800036c:	4b30      	ldr	r3, [pc, #192]	; (8000430 <MX_GPIO_Init+0xe8>)
 800036e:	695a      	ldr	r2, [r3, #20]
 8000370:	2380      	movs	r3, #128	; 0x80
 8000372:	03db      	lsls	r3, r3, #15
 8000374:	4013      	ands	r3, r2
 8000376:	60bb      	str	r3, [r7, #8]
 8000378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037a:	4b2d      	ldr	r3, [pc, #180]	; (8000430 <MX_GPIO_Init+0xe8>)
 800037c:	695a      	ldr	r2, [r3, #20]
 800037e:	4b2c      	ldr	r3, [pc, #176]	; (8000430 <MX_GPIO_Init+0xe8>)
 8000380:	2180      	movs	r1, #128	; 0x80
 8000382:	0289      	lsls	r1, r1, #10
 8000384:	430a      	orrs	r2, r1
 8000386:	615a      	str	r2, [r3, #20]
 8000388:	4b29      	ldr	r3, [pc, #164]	; (8000430 <MX_GPIO_Init+0xe8>)
 800038a:	695a      	ldr	r2, [r3, #20]
 800038c:	2380      	movs	r3, #128	; 0x80
 800038e:	029b      	lsls	r3, r3, #10
 8000390:	4013      	ands	r3, r2
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000396:	4b26      	ldr	r3, [pc, #152]	; (8000430 <MX_GPIO_Init+0xe8>)
 8000398:	695a      	ldr	r2, [r3, #20]
 800039a:	4b25      	ldr	r3, [pc, #148]	; (8000430 <MX_GPIO_Init+0xe8>)
 800039c:	2180      	movs	r1, #128	; 0x80
 800039e:	02c9      	lsls	r1, r1, #11
 80003a0:	430a      	orrs	r2, r1
 80003a2:	615a      	str	r2, [r3, #20]
 80003a4:	4b22      	ldr	r3, [pc, #136]	; (8000430 <MX_GPIO_Init+0xe8>)
 80003a6:	695a      	ldr	r2, [r3, #20]
 80003a8:	2380      	movs	r3, #128	; 0x80
 80003aa:	02db      	lsls	r3, r3, #11
 80003ac:	4013      	ands	r3, r2
 80003ae:	603b      	str	r3, [r7, #0]
 80003b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_RESET);
 80003b2:	4920      	ldr	r1, [pc, #128]	; (8000434 <MX_GPIO_Init+0xec>)
 80003b4:	2390      	movs	r3, #144	; 0x90
 80003b6:	05db      	lsls	r3, r3, #23
 80003b8:	2200      	movs	r2, #0
 80003ba:	0018      	movs	r0, r3
 80003bc:	f000 fba8 	bl	8000b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10;
 80003c0:	193b      	adds	r3, r7, r4
 80003c2:	4a1c      	ldr	r2, [pc, #112]	; (8000434 <MX_GPIO_Init+0xec>)
 80003c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c6:	193b      	adds	r3, r7, r4
 80003c8:	2201      	movs	r2, #1
 80003ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003cc:	193b      	adds	r3, r7, r4
 80003ce:	2200      	movs	r2, #0
 80003d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003d2:	193b      	adds	r3, r7, r4
 80003d4:	2203      	movs	r2, #3
 80003d6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d8:	193a      	adds	r2, r7, r4
 80003da:	2390      	movs	r3, #144	; 0x90
 80003dc:	05db      	lsls	r3, r3, #23
 80003de:	0011      	movs	r1, r2
 80003e0:	0018      	movs	r0, r3
 80003e2:	f000 fa2d 	bl	8000840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80003e6:	193b      	adds	r3, r7, r4
 80003e8:	2202      	movs	r2, #2
 80003ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ec:	193b      	adds	r3, r7, r4
 80003ee:	2200      	movs	r2, #0
 80003f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f2:	193b      	adds	r3, r7, r4
 80003f4:	2200      	movs	r2, #0
 80003f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003f8:	193b      	adds	r3, r7, r4
 80003fa:	4a0f      	ldr	r2, [pc, #60]	; (8000438 <MX_GPIO_Init+0xf0>)
 80003fc:	0019      	movs	r1, r3
 80003fe:	0010      	movs	r0, r2
 8000400:	f000 fa1e 	bl	8000840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000404:	0021      	movs	r1, r4
 8000406:	187b      	adds	r3, r7, r1
 8000408:	2280      	movs	r2, #128	; 0x80
 800040a:	0092      	lsls	r2, r2, #2
 800040c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800040e:	187b      	adds	r3, r7, r1
 8000410:	2200      	movs	r2, #0
 8000412:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000414:	187b      	adds	r3, r7, r1
 8000416:	2200      	movs	r2, #0
 8000418:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800041a:	187a      	adds	r2, r7, r1
 800041c:	2390      	movs	r3, #144	; 0x90
 800041e:	05db      	lsls	r3, r3, #23
 8000420:	0011      	movs	r1, r2
 8000422:	0018      	movs	r0, r3
 8000424:	f000 fa0c 	bl	8000840 <HAL_GPIO_Init>

}
 8000428:	46c0      	nop			; (mov r8, r8)
 800042a:	46bd      	mov	sp, r7
 800042c:	b009      	add	sp, #36	; 0x24
 800042e:	bd90      	pop	{r4, r7, pc}
 8000430:	40021000 	.word	0x40021000
 8000434:	00000407 	.word	0x00000407
 8000438:	48000400 	.word	0x48000400

0800043c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000440:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000442:	e7fe      	b.n	8000442 <Error_Handler+0x6>

08000444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800044a:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <HAL_MspInit+0x44>)
 800044c:	699a      	ldr	r2, [r3, #24]
 800044e:	4b0e      	ldr	r3, [pc, #56]	; (8000488 <HAL_MspInit+0x44>)
 8000450:	2101      	movs	r1, #1
 8000452:	430a      	orrs	r2, r1
 8000454:	619a      	str	r2, [r3, #24]
 8000456:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <HAL_MspInit+0x44>)
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	2201      	movs	r2, #1
 800045c:	4013      	ands	r3, r2
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000462:	4b09      	ldr	r3, [pc, #36]	; (8000488 <HAL_MspInit+0x44>)
 8000464:	69da      	ldr	r2, [r3, #28]
 8000466:	4b08      	ldr	r3, [pc, #32]	; (8000488 <HAL_MspInit+0x44>)
 8000468:	2180      	movs	r1, #128	; 0x80
 800046a:	0549      	lsls	r1, r1, #21
 800046c:	430a      	orrs	r2, r1
 800046e:	61da      	str	r2, [r3, #28]
 8000470:	4b05      	ldr	r3, [pc, #20]	; (8000488 <HAL_MspInit+0x44>)
 8000472:	69da      	ldr	r2, [r3, #28]
 8000474:	2380      	movs	r3, #128	; 0x80
 8000476:	055b      	lsls	r3, r3, #21
 8000478:	4013      	ands	r3, r2
 800047a:	603b      	str	r3, [r7, #0]
 800047c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	46bd      	mov	sp, r7
 8000482:	b002      	add	sp, #8
 8000484:	bd80      	pop	{r7, pc}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	40021000 	.word	0x40021000

0800048c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800048c:	b590      	push	{r4, r7, lr}
 800048e:	b08b      	sub	sp, #44	; 0x2c
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000494:	2314      	movs	r3, #20
 8000496:	18fb      	adds	r3, r7, r3
 8000498:	0018      	movs	r0, r3
 800049a:	2314      	movs	r3, #20
 800049c:	001a      	movs	r2, r3
 800049e:	2100      	movs	r1, #0
 80004a0:	f001 fbd2 	bl	8001c48 <memset>
  if(hspi->Instance==SPI1)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a28      	ldr	r2, [pc, #160]	; (800054c <HAL_SPI_MspInit+0xc0>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d149      	bne.n	8000542 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004ae:	4b28      	ldr	r3, [pc, #160]	; (8000550 <HAL_SPI_MspInit+0xc4>)
 80004b0:	699a      	ldr	r2, [r3, #24]
 80004b2:	4b27      	ldr	r3, [pc, #156]	; (8000550 <HAL_SPI_MspInit+0xc4>)
 80004b4:	2180      	movs	r1, #128	; 0x80
 80004b6:	0149      	lsls	r1, r1, #5
 80004b8:	430a      	orrs	r2, r1
 80004ba:	619a      	str	r2, [r3, #24]
 80004bc:	4b24      	ldr	r3, [pc, #144]	; (8000550 <HAL_SPI_MspInit+0xc4>)
 80004be:	699a      	ldr	r2, [r3, #24]
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	015b      	lsls	r3, r3, #5
 80004c4:	4013      	ands	r3, r2
 80004c6:	613b      	str	r3, [r7, #16]
 80004c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ca:	4b21      	ldr	r3, [pc, #132]	; (8000550 <HAL_SPI_MspInit+0xc4>)
 80004cc:	695a      	ldr	r2, [r3, #20]
 80004ce:	4b20      	ldr	r3, [pc, #128]	; (8000550 <HAL_SPI_MspInit+0xc4>)
 80004d0:	2180      	movs	r1, #128	; 0x80
 80004d2:	0289      	lsls	r1, r1, #10
 80004d4:	430a      	orrs	r2, r1
 80004d6:	615a      	str	r2, [r3, #20]
 80004d8:	4b1d      	ldr	r3, [pc, #116]	; (8000550 <HAL_SPI_MspInit+0xc4>)
 80004da:	695a      	ldr	r2, [r3, #20]
 80004dc:	2380      	movs	r3, #128	; 0x80
 80004de:	029b      	lsls	r3, r3, #10
 80004e0:	4013      	ands	r3, r2
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80004e6:	2414      	movs	r4, #20
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	2270      	movs	r2, #112	; 0x70
 80004ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ee:	193b      	adds	r3, r7, r4
 80004f0:	2202      	movs	r2, #2
 80004f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80004fa:	193b      	adds	r3, r7, r4
 80004fc:	2201      	movs	r2, #1
 80004fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000500:	193b      	adds	r3, r7, r4
 8000502:	2200      	movs	r2, #0
 8000504:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000506:	193a      	adds	r2, r7, r4
 8000508:	2390      	movs	r3, #144	; 0x90
 800050a:	05db      	lsls	r3, r3, #23
 800050c:	0011      	movs	r1, r2
 800050e:	0018      	movs	r0, r3
 8000510:	f000 f996 	bl	8000840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000514:	0021      	movs	r1, r4
 8000516:	187b      	adds	r3, r7, r1
 8000518:	2280      	movs	r2, #128	; 0x80
 800051a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800051c:	187b      	adds	r3, r7, r1
 800051e:	2202      	movs	r2, #2
 8000520:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000522:	187b      	adds	r3, r7, r1
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000528:	187b      	adds	r3, r7, r1
 800052a:	2203      	movs	r2, #3
 800052c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800052e:	187b      	adds	r3, r7, r1
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000534:	187a      	adds	r2, r7, r1
 8000536:	2390      	movs	r3, #144	; 0x90
 8000538:	05db      	lsls	r3, r3, #23
 800053a:	0011      	movs	r1, r2
 800053c:	0018      	movs	r0, r3
 800053e:	f000 f97f 	bl	8000840 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	46bd      	mov	sp, r7
 8000546:	b00b      	add	sp, #44	; 0x2c
 8000548:	bd90      	pop	{r4, r7, pc}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	40013000 	.word	0x40013000
 8000550:	40021000 	.word	0x40021000

08000554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000558:	e7fe      	b.n	8000558 <NMI_Handler+0x4>

0800055a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800055e:	e7fe      	b.n	800055e <HardFault_Handler+0x4>

08000560 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000564:	46c0      	nop			; (mov r8, r8)
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000578:	f000 f892 	bl	80006a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800057c:	46c0      	nop			; (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800058c:	4813      	ldr	r0, [pc, #76]	; (80005dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800058e:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000590:	4813      	ldr	r0, [pc, #76]	; (80005e0 <LoopForever+0x6>)
    LDR R1, [R0]
 8000592:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000594:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000596:	4a13      	ldr	r2, [pc, #76]	; (80005e4 <LoopForever+0xa>)
    CMP R1, R2
 8000598:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800059a:	d105      	bne.n	80005a8 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 800059c:	4812      	ldr	r0, [pc, #72]	; (80005e8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800059e:	4913      	ldr	r1, [pc, #76]	; (80005ec <LoopForever+0x12>)
    STR R1, [R0]
 80005a0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80005a2:	4813      	ldr	r0, [pc, #76]	; (80005f0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80005a4:	4913      	ldr	r1, [pc, #76]	; (80005f4 <LoopForever+0x1a>)
    STR R1, [R0]
 80005a6:	6001      	str	r1, [r0, #0]

080005a8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a8:	4813      	ldr	r0, [pc, #76]	; (80005f8 <LoopForever+0x1e>)
  ldr r1, =_edata
 80005aa:	4914      	ldr	r1, [pc, #80]	; (80005fc <LoopForever+0x22>)
  ldr r2, =_sidata
 80005ac:	4a14      	ldr	r2, [pc, #80]	; (8000600 <LoopForever+0x26>)
  movs r3, #0
 80005ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b0:	e002      	b.n	80005b8 <LoopCopyDataInit>

080005b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005b6:	3304      	adds	r3, #4

080005b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005bc:	d3f9      	bcc.n	80005b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005be:	4a11      	ldr	r2, [pc, #68]	; (8000604 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80005c0:	4c11      	ldr	r4, [pc, #68]	; (8000608 <LoopForever+0x2e>)
  movs r3, #0
 80005c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c4:	e001      	b.n	80005ca <LoopFillZerobss>

080005c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c8:	3204      	adds	r2, #4

080005ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005cc:	d3fb      	bcc.n	80005c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005ce:	f7ff ffd8 	bl	8000582 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80005d2:	f001 fb15 	bl	8001c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005d6:	f7ff fe23 	bl	8000220 <main>

080005da <LoopForever>:

LoopForever:
    b LoopForever
 80005da:	e7fe      	b.n	80005da <LoopForever>
  ldr   r0, =_estack
 80005dc:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80005e0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80005e4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80005e8:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80005ec:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80005f0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80005f4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80005f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000600:	08001ca8 	.word	0x08001ca8
  ldr r2, =_sbss
 8000604:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000608:	20000090 	.word	0x20000090

0800060c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800060c:	e7fe      	b.n	800060c <ADC1_IRQHandler>
	...

08000610 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <HAL_Init+0x24>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_Init+0x24>)
 800061a:	2110      	movs	r1, #16
 800061c:	430a      	orrs	r2, r1
 800061e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000620:	2000      	movs	r0, #0
 8000622:	f000 f809 	bl	8000638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000626:	f7ff ff0d 	bl	8000444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800062a:	2300      	movs	r3, #0
}
 800062c:	0018      	movs	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	40022000 	.word	0x40022000

08000638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000640:	4b14      	ldr	r3, [pc, #80]	; (8000694 <HAL_InitTick+0x5c>)
 8000642:	681c      	ldr	r4, [r3, #0]
 8000644:	4b14      	ldr	r3, [pc, #80]	; (8000698 <HAL_InitTick+0x60>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	0019      	movs	r1, r3
 800064a:	23fa      	movs	r3, #250	; 0xfa
 800064c:	0098      	lsls	r0, r3, #2
 800064e:	f7ff fd5b 	bl	8000108 <__udivsi3>
 8000652:	0003      	movs	r3, r0
 8000654:	0019      	movs	r1, r3
 8000656:	0020      	movs	r0, r4
 8000658:	f7ff fd56 	bl	8000108 <__udivsi3>
 800065c:	0003      	movs	r3, r0
 800065e:	0018      	movs	r0, r3
 8000660:	f000 f8e1 	bl	8000826 <HAL_SYSTICK_Config>
 8000664:	1e03      	subs	r3, r0, #0
 8000666:	d001      	beq.n	800066c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000668:	2301      	movs	r3, #1
 800066a:	e00f      	b.n	800068c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2b03      	cmp	r3, #3
 8000670:	d80b      	bhi.n	800068a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000672:	6879      	ldr	r1, [r7, #4]
 8000674:	2301      	movs	r3, #1
 8000676:	425b      	negs	r3, r3
 8000678:	2200      	movs	r2, #0
 800067a:	0018      	movs	r0, r3
 800067c:	f000 f8be 	bl	80007fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <HAL_InitTick+0x64>)
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000686:	2300      	movs	r3, #0
 8000688:	e000      	b.n	800068c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800068a:	2301      	movs	r3, #1
}
 800068c:	0018      	movs	r0, r3
 800068e:	46bd      	mov	sp, r7
 8000690:	b003      	add	sp, #12
 8000692:	bd90      	pop	{r4, r7, pc}
 8000694:	20000000 	.word	0x20000000
 8000698:	20000008 	.word	0x20000008
 800069c:	20000004 	.word	0x20000004

080006a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <HAL_IncTick+0x1c>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	001a      	movs	r2, r3
 80006aa:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <HAL_IncTick+0x20>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	18d2      	adds	r2, r2, r3
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <HAL_IncTick+0x20>)
 80006b2:	601a      	str	r2, [r3, #0]
}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	20000008 	.word	0x20000008
 80006c0:	2000008c 	.word	0x2000008c

080006c4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  return uwTick;
 80006c8:	4b02      	ldr	r3, [pc, #8]	; (80006d4 <HAL_GetTick+0x10>)
 80006ca:	681b      	ldr	r3, [r3, #0]
}
 80006cc:	0018      	movs	r0, r3
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	2000008c 	.word	0x2000008c

080006d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d8:	b590      	push	{r4, r7, lr}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	0002      	movs	r2, r0
 80006e0:	6039      	str	r1, [r7, #0]
 80006e2:	1dfb      	adds	r3, r7, #7
 80006e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006e6:	1dfb      	adds	r3, r7, #7
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b7f      	cmp	r3, #127	; 0x7f
 80006ec:	d828      	bhi.n	8000740 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006ee:	4a2f      	ldr	r2, [pc, #188]	; (80007ac <__NVIC_SetPriority+0xd4>)
 80006f0:	1dfb      	adds	r3, r7, #7
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	b25b      	sxtb	r3, r3
 80006f6:	089b      	lsrs	r3, r3, #2
 80006f8:	33c0      	adds	r3, #192	; 0xc0
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	589b      	ldr	r3, [r3, r2]
 80006fe:	1dfa      	adds	r2, r7, #7
 8000700:	7812      	ldrb	r2, [r2, #0]
 8000702:	0011      	movs	r1, r2
 8000704:	2203      	movs	r2, #3
 8000706:	400a      	ands	r2, r1
 8000708:	00d2      	lsls	r2, r2, #3
 800070a:	21ff      	movs	r1, #255	; 0xff
 800070c:	4091      	lsls	r1, r2
 800070e:	000a      	movs	r2, r1
 8000710:	43d2      	mvns	r2, r2
 8000712:	401a      	ands	r2, r3
 8000714:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	019b      	lsls	r3, r3, #6
 800071a:	22ff      	movs	r2, #255	; 0xff
 800071c:	401a      	ands	r2, r3
 800071e:	1dfb      	adds	r3, r7, #7
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	0018      	movs	r0, r3
 8000724:	2303      	movs	r3, #3
 8000726:	4003      	ands	r3, r0
 8000728:	00db      	lsls	r3, r3, #3
 800072a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800072c:	481f      	ldr	r0, [pc, #124]	; (80007ac <__NVIC_SetPriority+0xd4>)
 800072e:	1dfb      	adds	r3, r7, #7
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	b25b      	sxtb	r3, r3
 8000734:	089b      	lsrs	r3, r3, #2
 8000736:	430a      	orrs	r2, r1
 8000738:	33c0      	adds	r3, #192	; 0xc0
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800073e:	e031      	b.n	80007a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000740:	4a1b      	ldr	r2, [pc, #108]	; (80007b0 <__NVIC_SetPriority+0xd8>)
 8000742:	1dfb      	adds	r3, r7, #7
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	0019      	movs	r1, r3
 8000748:	230f      	movs	r3, #15
 800074a:	400b      	ands	r3, r1
 800074c:	3b08      	subs	r3, #8
 800074e:	089b      	lsrs	r3, r3, #2
 8000750:	3306      	adds	r3, #6
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	18d3      	adds	r3, r2, r3
 8000756:	3304      	adds	r3, #4
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	1dfa      	adds	r2, r7, #7
 800075c:	7812      	ldrb	r2, [r2, #0]
 800075e:	0011      	movs	r1, r2
 8000760:	2203      	movs	r2, #3
 8000762:	400a      	ands	r2, r1
 8000764:	00d2      	lsls	r2, r2, #3
 8000766:	21ff      	movs	r1, #255	; 0xff
 8000768:	4091      	lsls	r1, r2
 800076a:	000a      	movs	r2, r1
 800076c:	43d2      	mvns	r2, r2
 800076e:	401a      	ands	r2, r3
 8000770:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	019b      	lsls	r3, r3, #6
 8000776:	22ff      	movs	r2, #255	; 0xff
 8000778:	401a      	ands	r2, r3
 800077a:	1dfb      	adds	r3, r7, #7
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	0018      	movs	r0, r3
 8000780:	2303      	movs	r3, #3
 8000782:	4003      	ands	r3, r0
 8000784:	00db      	lsls	r3, r3, #3
 8000786:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000788:	4809      	ldr	r0, [pc, #36]	; (80007b0 <__NVIC_SetPriority+0xd8>)
 800078a:	1dfb      	adds	r3, r7, #7
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	001c      	movs	r4, r3
 8000790:	230f      	movs	r3, #15
 8000792:	4023      	ands	r3, r4
 8000794:	3b08      	subs	r3, #8
 8000796:	089b      	lsrs	r3, r3, #2
 8000798:	430a      	orrs	r2, r1
 800079a:	3306      	adds	r3, #6
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	18c3      	adds	r3, r0, r3
 80007a0:	3304      	adds	r3, #4
 80007a2:	601a      	str	r2, [r3, #0]
}
 80007a4:	46c0      	nop			; (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b003      	add	sp, #12
 80007aa:	bd90      	pop	{r4, r7, pc}
 80007ac:	e000e100 	.word	0xe000e100
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3b01      	subs	r3, #1
 80007c0:	4a0c      	ldr	r2, [pc, #48]	; (80007f4 <SysTick_Config+0x40>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d901      	bls.n	80007ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007c6:	2301      	movs	r3, #1
 80007c8:	e010      	b.n	80007ec <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <SysTick_Config+0x44>)
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	3a01      	subs	r2, #1
 80007d0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007d2:	2301      	movs	r3, #1
 80007d4:	425b      	negs	r3, r3
 80007d6:	2103      	movs	r1, #3
 80007d8:	0018      	movs	r0, r3
 80007da:	f7ff ff7d 	bl	80006d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <SysTick_Config+0x44>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007e4:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <SysTick_Config+0x44>)
 80007e6:	2207      	movs	r2, #7
 80007e8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007ea:	2300      	movs	r3, #0
}
 80007ec:	0018      	movs	r0, r3
 80007ee:	46bd      	mov	sp, r7
 80007f0:	b002      	add	sp, #8
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	00ffffff 	.word	0x00ffffff
 80007f8:	e000e010 	.word	0xe000e010

080007fc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	60b9      	str	r1, [r7, #8]
 8000804:	607a      	str	r2, [r7, #4]
 8000806:	210f      	movs	r1, #15
 8000808:	187b      	adds	r3, r7, r1
 800080a:	1c02      	adds	r2, r0, #0
 800080c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800080e:	68ba      	ldr	r2, [r7, #8]
 8000810:	187b      	adds	r3, r7, r1
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	b25b      	sxtb	r3, r3
 8000816:	0011      	movs	r1, r2
 8000818:	0018      	movs	r0, r3
 800081a:	f7ff ff5d 	bl	80006d8 <__NVIC_SetPriority>
}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	b004      	add	sp, #16
 8000824:	bd80      	pop	{r7, pc}

08000826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	0018      	movs	r0, r3
 8000832:	f7ff ffbf 	bl	80007b4 <SysTick_Config>
 8000836:	0003      	movs	r3, r0
}
 8000838:	0018      	movs	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	b002      	add	sp, #8
 800083e:	bd80      	pop	{r7, pc}

08000840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800084e:	e149      	b.n	8000ae4 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2101      	movs	r1, #1
 8000856:	697a      	ldr	r2, [r7, #20]
 8000858:	4091      	lsls	r1, r2
 800085a:	000a      	movs	r2, r1
 800085c:	4013      	ands	r3, r2
 800085e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <HAL_GPIO_Init+0x28>
 8000866:	e13a      	b.n	8000ade <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d00b      	beq.n	8000888 <HAL_GPIO_Init+0x48>
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d007      	beq.n	8000888 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800087c:	2b11      	cmp	r3, #17
 800087e:	d003      	beq.n	8000888 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	2b12      	cmp	r3, #18
 8000886:	d130      	bne.n	80008ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	689b      	ldr	r3, [r3, #8]
 800088c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	2203      	movs	r2, #3
 8000894:	409a      	lsls	r2, r3
 8000896:	0013      	movs	r3, r2
 8000898:	43da      	mvns	r2, r3
 800089a:	693b      	ldr	r3, [r7, #16]
 800089c:	4013      	ands	r3, r2
 800089e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	68da      	ldr	r2, [r3, #12]
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	409a      	lsls	r2, r3
 80008aa:	0013      	movs	r3, r2
 80008ac:	693a      	ldr	r2, [r7, #16]
 80008ae:	4313      	orrs	r3, r2
 80008b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	693a      	ldr	r2, [r7, #16]
 80008b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008be:	2201      	movs	r2, #1
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	409a      	lsls	r2, r3
 80008c4:	0013      	movs	r3, r2
 80008c6:	43da      	mvns	r2, r3
 80008c8:	693b      	ldr	r3, [r7, #16]
 80008ca:	4013      	ands	r3, r2
 80008cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	091b      	lsrs	r3, r3, #4
 80008d4:	2201      	movs	r2, #1
 80008d6:	401a      	ands	r2, r3
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	409a      	lsls	r2, r3
 80008dc:	0013      	movs	r3, r2
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	68db      	ldr	r3, [r3, #12]
 80008ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	2203      	movs	r2, #3
 80008f6:	409a      	lsls	r2, r3
 80008f8:	0013      	movs	r3, r2
 80008fa:	43da      	mvns	r2, r3
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	4013      	ands	r3, r2
 8000900:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	689a      	ldr	r2, [r3, #8]
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	409a      	lsls	r2, r3
 800090c:	0013      	movs	r3, r2
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	4313      	orrs	r3, r2
 8000912:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	2b02      	cmp	r3, #2
 8000920:	d003      	beq.n	800092a <HAL_GPIO_Init+0xea>
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	2b12      	cmp	r3, #18
 8000928:	d123      	bne.n	8000972 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	08da      	lsrs	r2, r3, #3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	3208      	adds	r2, #8
 8000932:	0092      	lsls	r2, r2, #2
 8000934:	58d3      	ldr	r3, [r2, r3]
 8000936:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	2207      	movs	r2, #7
 800093c:	4013      	ands	r3, r2
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	220f      	movs	r2, #15
 8000942:	409a      	lsls	r2, r3
 8000944:	0013      	movs	r3, r2
 8000946:	43da      	mvns	r2, r3
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	4013      	ands	r3, r2
 800094c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	691a      	ldr	r2, [r3, #16]
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	2107      	movs	r1, #7
 8000956:	400b      	ands	r3, r1
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	409a      	lsls	r2, r3
 800095c:	0013      	movs	r3, r2
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	4313      	orrs	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	08da      	lsrs	r2, r3, #3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3208      	adds	r2, #8
 800096c:	0092      	lsls	r2, r2, #2
 800096e:	6939      	ldr	r1, [r7, #16]
 8000970:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	2203      	movs	r2, #3
 800097e:	409a      	lsls	r2, r3
 8000980:	0013      	movs	r3, r2
 8000982:	43da      	mvns	r2, r3
 8000984:	693b      	ldr	r3, [r7, #16]
 8000986:	4013      	ands	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	2203      	movs	r2, #3
 8000990:	401a      	ands	r2, r3
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	409a      	lsls	r2, r3
 8000998:	0013      	movs	r3, r2
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	4313      	orrs	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	685a      	ldr	r2, [r3, #4]
 80009aa:	2380      	movs	r3, #128	; 0x80
 80009ac:	055b      	lsls	r3, r3, #21
 80009ae:	4013      	ands	r3, r2
 80009b0:	d100      	bne.n	80009b4 <HAL_GPIO_Init+0x174>
 80009b2:	e094      	b.n	8000ade <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b4:	4b51      	ldr	r3, [pc, #324]	; (8000afc <HAL_GPIO_Init+0x2bc>)
 80009b6:	699a      	ldr	r2, [r3, #24]
 80009b8:	4b50      	ldr	r3, [pc, #320]	; (8000afc <HAL_GPIO_Init+0x2bc>)
 80009ba:	2101      	movs	r1, #1
 80009bc:	430a      	orrs	r2, r1
 80009be:	619a      	str	r2, [r3, #24]
 80009c0:	4b4e      	ldr	r3, [pc, #312]	; (8000afc <HAL_GPIO_Init+0x2bc>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	2201      	movs	r2, #1
 80009c6:	4013      	ands	r3, r2
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009cc:	4a4c      	ldr	r2, [pc, #304]	; (8000b00 <HAL_GPIO_Init+0x2c0>)
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	089b      	lsrs	r3, r3, #2
 80009d2:	3302      	adds	r3, #2
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	589b      	ldr	r3, [r3, r2]
 80009d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	2203      	movs	r2, #3
 80009de:	4013      	ands	r3, r2
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	220f      	movs	r2, #15
 80009e4:	409a      	lsls	r2, r3
 80009e6:	0013      	movs	r3, r2
 80009e8:	43da      	mvns	r2, r3
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	4013      	ands	r3, r2
 80009ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	2390      	movs	r3, #144	; 0x90
 80009f4:	05db      	lsls	r3, r3, #23
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d00d      	beq.n	8000a16 <HAL_GPIO_Init+0x1d6>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a41      	ldr	r2, [pc, #260]	; (8000b04 <HAL_GPIO_Init+0x2c4>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d007      	beq.n	8000a12 <HAL_GPIO_Init+0x1d2>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a40      	ldr	r2, [pc, #256]	; (8000b08 <HAL_GPIO_Init+0x2c8>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d101      	bne.n	8000a0e <HAL_GPIO_Init+0x1ce>
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	e004      	b.n	8000a18 <HAL_GPIO_Init+0x1d8>
 8000a0e:	2305      	movs	r3, #5
 8000a10:	e002      	b.n	8000a18 <HAL_GPIO_Init+0x1d8>
 8000a12:	2301      	movs	r3, #1
 8000a14:	e000      	b.n	8000a18 <HAL_GPIO_Init+0x1d8>
 8000a16:	2300      	movs	r3, #0
 8000a18:	697a      	ldr	r2, [r7, #20]
 8000a1a:	2103      	movs	r1, #3
 8000a1c:	400a      	ands	r2, r1
 8000a1e:	0092      	lsls	r2, r2, #2
 8000a20:	4093      	lsls	r3, r2
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a28:	4935      	ldr	r1, [pc, #212]	; (8000b00 <HAL_GPIO_Init+0x2c0>)
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	089b      	lsrs	r3, r3, #2
 8000a2e:	3302      	adds	r3, #2
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a36:	4b35      	ldr	r3, [pc, #212]	; (8000b0c <HAL_GPIO_Init+0x2cc>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	43da      	mvns	r2, r3
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	4013      	ands	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	685a      	ldr	r2, [r3, #4]
 8000a4a:	2380      	movs	r3, #128	; 0x80
 8000a4c:	025b      	lsls	r3, r3, #9
 8000a4e:	4013      	ands	r3, r2
 8000a50:	d003      	beq.n	8000a5a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a5a:	4b2c      	ldr	r3, [pc, #176]	; (8000b0c <HAL_GPIO_Init+0x2cc>)
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000a60:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <HAL_GPIO_Init+0x2cc>)
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	43da      	mvns	r2, r3
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685a      	ldr	r2, [r3, #4]
 8000a74:	2380      	movs	r3, #128	; 0x80
 8000a76:	029b      	lsls	r3, r3, #10
 8000a78:	4013      	ands	r3, r2
 8000a7a:	d003      	beq.n	8000a84 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a84:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <HAL_GPIO_Init+0x2cc>)
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a8a:	4b20      	ldr	r3, [pc, #128]	; (8000b0c <HAL_GPIO_Init+0x2cc>)
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	43da      	mvns	r2, r3
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	4013      	ands	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685a      	ldr	r2, [r3, #4]
 8000a9e:	2380      	movs	r3, #128	; 0x80
 8000aa0:	035b      	lsls	r3, r3, #13
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	d003      	beq.n	8000aae <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000aae:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <HAL_GPIO_Init+0x2cc>)
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ab4:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <HAL_GPIO_Init+0x2cc>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	43da      	mvns	r2, r3
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685a      	ldr	r2, [r3, #4]
 8000ac8:	2380      	movs	r3, #128	; 0x80
 8000aca:	039b      	lsls	r3, r3, #14
 8000acc:	4013      	ands	r3, r2
 8000ace:	d003      	beq.n	8000ad8 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <HAL_GPIO_Init+0x2cc>)
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	40da      	lsrs	r2, r3
 8000aec:	1e13      	subs	r3, r2, #0
 8000aee:	d000      	beq.n	8000af2 <HAL_GPIO_Init+0x2b2>
 8000af0:	e6ae      	b.n	8000850 <HAL_GPIO_Init+0x10>
  } 
}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b006      	add	sp, #24
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40010000 	.word	0x40010000
 8000b04:	48000400 	.word	0x48000400
 8000b08:	48000800 	.word	0x48000800
 8000b0c:	40010400 	.word	0x40010400

08000b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	0008      	movs	r0, r1
 8000b1a:	0011      	movs	r1, r2
 8000b1c:	1cbb      	adds	r3, r7, #2
 8000b1e:	1c02      	adds	r2, r0, #0
 8000b20:	801a      	strh	r2, [r3, #0]
 8000b22:	1c7b      	adds	r3, r7, #1
 8000b24:	1c0a      	adds	r2, r1, #0
 8000b26:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b28:	1c7b      	adds	r3, r7, #1
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d004      	beq.n	8000b3a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b30:	1cbb      	adds	r3, r7, #2
 8000b32:	881a      	ldrh	r2, [r3, #0]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b38:	e003      	b.n	8000b42 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b3a:	1cbb      	adds	r3, r7, #2
 8000b3c:	881a      	ldrh	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	b002      	add	sp, #8
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b088      	sub	sp, #32
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d102      	bne.n	8000b60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	f000 fb76 	bl	800124c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2201      	movs	r2, #1
 8000b66:	4013      	ands	r3, r2
 8000b68:	d100      	bne.n	8000b6c <HAL_RCC_OscConfig+0x20>
 8000b6a:	e08e      	b.n	8000c8a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b6c:	4bc5      	ldr	r3, [pc, #788]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	220c      	movs	r2, #12
 8000b72:	4013      	ands	r3, r2
 8000b74:	2b04      	cmp	r3, #4
 8000b76:	d00e      	beq.n	8000b96 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b78:	4bc2      	ldr	r3, [pc, #776]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	220c      	movs	r2, #12
 8000b7e:	4013      	ands	r3, r2
 8000b80:	2b08      	cmp	r3, #8
 8000b82:	d117      	bne.n	8000bb4 <HAL_RCC_OscConfig+0x68>
 8000b84:	4bbf      	ldr	r3, [pc, #764]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000b86:	685a      	ldr	r2, [r3, #4]
 8000b88:	23c0      	movs	r3, #192	; 0xc0
 8000b8a:	025b      	lsls	r3, r3, #9
 8000b8c:	401a      	ands	r2, r3
 8000b8e:	2380      	movs	r3, #128	; 0x80
 8000b90:	025b      	lsls	r3, r3, #9
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d10e      	bne.n	8000bb4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b96:	4bbb      	ldr	r3, [pc, #748]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	2380      	movs	r3, #128	; 0x80
 8000b9c:	029b      	lsls	r3, r3, #10
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	d100      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x58>
 8000ba2:	e071      	b.n	8000c88 <HAL_RCC_OscConfig+0x13c>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d000      	beq.n	8000bae <HAL_RCC_OscConfig+0x62>
 8000bac:	e06c      	b.n	8000c88 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	f000 fb4c 	bl	800124c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d107      	bne.n	8000bcc <HAL_RCC_OscConfig+0x80>
 8000bbc:	4bb1      	ldr	r3, [pc, #708]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4bb0      	ldr	r3, [pc, #704]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000bc2:	2180      	movs	r1, #128	; 0x80
 8000bc4:	0249      	lsls	r1, r1, #9
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	e02f      	b.n	8000c2c <HAL_RCC_OscConfig+0xe0>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d10c      	bne.n	8000bee <HAL_RCC_OscConfig+0xa2>
 8000bd4:	4bab      	ldr	r3, [pc, #684]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4baa      	ldr	r3, [pc, #680]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000bda:	49ab      	ldr	r1, [pc, #684]	; (8000e88 <HAL_RCC_OscConfig+0x33c>)
 8000bdc:	400a      	ands	r2, r1
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	4ba8      	ldr	r3, [pc, #672]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4ba7      	ldr	r3, [pc, #668]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000be6:	49a9      	ldr	r1, [pc, #676]	; (8000e8c <HAL_RCC_OscConfig+0x340>)
 8000be8:	400a      	ands	r2, r1
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	e01e      	b.n	8000c2c <HAL_RCC_OscConfig+0xe0>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	2b05      	cmp	r3, #5
 8000bf4:	d10e      	bne.n	8000c14 <HAL_RCC_OscConfig+0xc8>
 8000bf6:	4ba3      	ldr	r3, [pc, #652]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	4ba2      	ldr	r3, [pc, #648]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000bfc:	2180      	movs	r1, #128	; 0x80
 8000bfe:	02c9      	lsls	r1, r1, #11
 8000c00:	430a      	orrs	r2, r1
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	4b9f      	ldr	r3, [pc, #636]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b9e      	ldr	r3, [pc, #632]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000c0a:	2180      	movs	r1, #128	; 0x80
 8000c0c:	0249      	lsls	r1, r1, #9
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	e00b      	b.n	8000c2c <HAL_RCC_OscConfig+0xe0>
 8000c14:	4b9b      	ldr	r3, [pc, #620]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b9a      	ldr	r3, [pc, #616]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000c1a:	499b      	ldr	r1, [pc, #620]	; (8000e88 <HAL_RCC_OscConfig+0x33c>)
 8000c1c:	400a      	ands	r2, r1
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	4b98      	ldr	r3, [pc, #608]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b97      	ldr	r3, [pc, #604]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000c26:	4999      	ldr	r1, [pc, #612]	; (8000e8c <HAL_RCC_OscConfig+0x340>)
 8000c28:	400a      	ands	r2, r1
 8000c2a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d014      	beq.n	8000c5e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c34:	f7ff fd46 	bl	80006c4 <HAL_GetTick>
 8000c38:	0003      	movs	r3, r0
 8000c3a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c3c:	e008      	b.n	8000c50 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c3e:	f7ff fd41 	bl	80006c4 <HAL_GetTick>
 8000c42:	0002      	movs	r2, r0
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	2b64      	cmp	r3, #100	; 0x64
 8000c4a:	d901      	bls.n	8000c50 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	e2fd      	b.n	800124c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c50:	4b8c      	ldr	r3, [pc, #560]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	2380      	movs	r3, #128	; 0x80
 8000c56:	029b      	lsls	r3, r3, #10
 8000c58:	4013      	ands	r3, r2
 8000c5a:	d0f0      	beq.n	8000c3e <HAL_RCC_OscConfig+0xf2>
 8000c5c:	e015      	b.n	8000c8a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c5e:	f7ff fd31 	bl	80006c4 <HAL_GetTick>
 8000c62:	0003      	movs	r3, r0
 8000c64:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c66:	e008      	b.n	8000c7a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c68:	f7ff fd2c 	bl	80006c4 <HAL_GetTick>
 8000c6c:	0002      	movs	r2, r0
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b64      	cmp	r3, #100	; 0x64
 8000c74:	d901      	bls.n	8000c7a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000c76:	2303      	movs	r3, #3
 8000c78:	e2e8      	b.n	800124c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c7a:	4b82      	ldr	r3, [pc, #520]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	2380      	movs	r3, #128	; 0x80
 8000c80:	029b      	lsls	r3, r3, #10
 8000c82:	4013      	ands	r3, r2
 8000c84:	d1f0      	bne.n	8000c68 <HAL_RCC_OscConfig+0x11c>
 8000c86:	e000      	b.n	8000c8a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c88:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2202      	movs	r2, #2
 8000c90:	4013      	ands	r3, r2
 8000c92:	d100      	bne.n	8000c96 <HAL_RCC_OscConfig+0x14a>
 8000c94:	e06c      	b.n	8000d70 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c96:	4b7b      	ldr	r3, [pc, #492]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	d00e      	beq.n	8000cbe <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ca0:	4b78      	ldr	r3, [pc, #480]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	220c      	movs	r2, #12
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	2b08      	cmp	r3, #8
 8000caa:	d11f      	bne.n	8000cec <HAL_RCC_OscConfig+0x1a0>
 8000cac:	4b75      	ldr	r3, [pc, #468]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000cae:	685a      	ldr	r2, [r3, #4]
 8000cb0:	23c0      	movs	r3, #192	; 0xc0
 8000cb2:	025b      	lsls	r3, r3, #9
 8000cb4:	401a      	ands	r2, r3
 8000cb6:	2380      	movs	r3, #128	; 0x80
 8000cb8:	021b      	lsls	r3, r3, #8
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d116      	bne.n	8000cec <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cbe:	4b71      	ldr	r3, [pc, #452]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	d005      	beq.n	8000cd4 <HAL_RCC_OscConfig+0x188>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d001      	beq.n	8000cd4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e2bb      	b.n	800124c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cd4:	4b6b      	ldr	r3, [pc, #428]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	22f8      	movs	r2, #248	; 0xf8
 8000cda:	4393      	bics	r3, r2
 8000cdc:	0019      	movs	r1, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	691b      	ldr	r3, [r3, #16]
 8000ce2:	00da      	lsls	r2, r3, #3
 8000ce4:	4b67      	ldr	r3, [pc, #412]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cea:	e041      	b.n	8000d70 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d024      	beq.n	8000d3e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cf4:	4b63      	ldr	r3, [pc, #396]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4b62      	ldr	r3, [pc, #392]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d00:	f7ff fce0 	bl	80006c4 <HAL_GetTick>
 8000d04:	0003      	movs	r3, r0
 8000d06:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d08:	e008      	b.n	8000d1c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d0a:	f7ff fcdb 	bl	80006c4 <HAL_GetTick>
 8000d0e:	0002      	movs	r2, r0
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d901      	bls.n	8000d1c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	e297      	b.n	800124c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d1c:	4b59      	ldr	r3, [pc, #356]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2202      	movs	r2, #2
 8000d22:	4013      	ands	r3, r2
 8000d24:	d0f1      	beq.n	8000d0a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d26:	4b57      	ldr	r3, [pc, #348]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	22f8      	movs	r2, #248	; 0xf8
 8000d2c:	4393      	bics	r3, r2
 8000d2e:	0019      	movs	r1, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	691b      	ldr	r3, [r3, #16]
 8000d34:	00da      	lsls	r2, r3, #3
 8000d36:	4b53      	ldr	r3, [pc, #332]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	e018      	b.n	8000d70 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d3e:	4b51      	ldr	r3, [pc, #324]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	4b50      	ldr	r3, [pc, #320]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000d44:	2101      	movs	r1, #1
 8000d46:	438a      	bics	r2, r1
 8000d48:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d4a:	f7ff fcbb 	bl	80006c4 <HAL_GetTick>
 8000d4e:	0003      	movs	r3, r0
 8000d50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d52:	e008      	b.n	8000d66 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d54:	f7ff fcb6 	bl	80006c4 <HAL_GetTick>
 8000d58:	0002      	movs	r2, r0
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d901      	bls.n	8000d66 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000d62:	2303      	movs	r3, #3
 8000d64:	e272      	b.n	800124c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d66:	4b47      	ldr	r3, [pc, #284]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	d1f1      	bne.n	8000d54 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2208      	movs	r2, #8
 8000d76:	4013      	ands	r3, r2
 8000d78:	d036      	beq.n	8000de8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	69db      	ldr	r3, [r3, #28]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d019      	beq.n	8000db6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d82:	4b40      	ldr	r3, [pc, #256]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000d84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d86:	4b3f      	ldr	r3, [pc, #252]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000d88:	2101      	movs	r1, #1
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d8e:	f7ff fc99 	bl	80006c4 <HAL_GetTick>
 8000d92:	0003      	movs	r3, r0
 8000d94:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d96:	e008      	b.n	8000daa <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d98:	f7ff fc94 	bl	80006c4 <HAL_GetTick>
 8000d9c:	0002      	movs	r2, r0
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d901      	bls.n	8000daa <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000da6:	2303      	movs	r3, #3
 8000da8:	e250      	b.n	800124c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000daa:	4b36      	ldr	r3, [pc, #216]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dae:	2202      	movs	r2, #2
 8000db0:	4013      	ands	r3, r2
 8000db2:	d0f1      	beq.n	8000d98 <HAL_RCC_OscConfig+0x24c>
 8000db4:	e018      	b.n	8000de8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000db6:	4b33      	ldr	r3, [pc, #204]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000db8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dba:	4b32      	ldr	r3, [pc, #200]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	438a      	bics	r2, r1
 8000dc0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dc2:	f7ff fc7f 	bl	80006c4 <HAL_GetTick>
 8000dc6:	0003      	movs	r3, r0
 8000dc8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dca:	e008      	b.n	8000dde <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dcc:	f7ff fc7a 	bl	80006c4 <HAL_GetTick>
 8000dd0:	0002      	movs	r2, r0
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d901      	bls.n	8000dde <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e236      	b.n	800124c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dde:	4b29      	ldr	r3, [pc, #164]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de2:	2202      	movs	r2, #2
 8000de4:	4013      	ands	r3, r2
 8000de6:	d1f1      	bne.n	8000dcc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2204      	movs	r2, #4
 8000dee:	4013      	ands	r3, r2
 8000df0:	d100      	bne.n	8000df4 <HAL_RCC_OscConfig+0x2a8>
 8000df2:	e0b5      	b.n	8000f60 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000df4:	231f      	movs	r3, #31
 8000df6:	18fb      	adds	r3, r7, r3
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dfc:	4b21      	ldr	r3, [pc, #132]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000dfe:	69da      	ldr	r2, [r3, #28]
 8000e00:	2380      	movs	r3, #128	; 0x80
 8000e02:	055b      	lsls	r3, r3, #21
 8000e04:	4013      	ands	r3, r2
 8000e06:	d111      	bne.n	8000e2c <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e08:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000e0a:	69da      	ldr	r2, [r3, #28]
 8000e0c:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000e0e:	2180      	movs	r1, #128	; 0x80
 8000e10:	0549      	lsls	r1, r1, #21
 8000e12:	430a      	orrs	r2, r1
 8000e14:	61da      	str	r2, [r3, #28]
 8000e16:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000e18:	69da      	ldr	r2, [r3, #28]
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	055b      	lsls	r3, r3, #21
 8000e1e:	4013      	ands	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e24:	231f      	movs	r3, #31
 8000e26:	18fb      	adds	r3, r7, r3
 8000e28:	2201      	movs	r2, #1
 8000e2a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e2c:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <HAL_RCC_OscConfig+0x344>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	2380      	movs	r3, #128	; 0x80
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	4013      	ands	r3, r2
 8000e36:	d11a      	bne.n	8000e6e <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e38:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <HAL_RCC_OscConfig+0x344>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <HAL_RCC_OscConfig+0x344>)
 8000e3e:	2180      	movs	r1, #128	; 0x80
 8000e40:	0049      	lsls	r1, r1, #1
 8000e42:	430a      	orrs	r2, r1
 8000e44:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e46:	f7ff fc3d 	bl	80006c4 <HAL_GetTick>
 8000e4a:	0003      	movs	r3, r0
 8000e4c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e4e:	e008      	b.n	8000e62 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e50:	f7ff fc38 	bl	80006c4 <HAL_GetTick>
 8000e54:	0002      	movs	r2, r0
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b64      	cmp	r3, #100	; 0x64
 8000e5c:	d901      	bls.n	8000e62 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e1f4      	b.n	800124c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e62:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <HAL_RCC_OscConfig+0x344>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	2380      	movs	r3, #128	; 0x80
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	d0f0      	beq.n	8000e50 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d10e      	bne.n	8000e94 <HAL_RCC_OscConfig+0x348>
 8000e76:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000e78:	6a1a      	ldr	r2, [r3, #32]
 8000e7a:	4b02      	ldr	r3, [pc, #8]	; (8000e84 <HAL_RCC_OscConfig+0x338>)
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	621a      	str	r2, [r3, #32]
 8000e82:	e035      	b.n	8000ef0 <HAL_RCC_OscConfig+0x3a4>
 8000e84:	40021000 	.word	0x40021000
 8000e88:	fffeffff 	.word	0xfffeffff
 8000e8c:	fffbffff 	.word	0xfffbffff
 8000e90:	40007000 	.word	0x40007000
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d10c      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x36a>
 8000e9c:	4bca      	ldr	r3, [pc, #808]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8000e9e:	6a1a      	ldr	r2, [r3, #32]
 8000ea0:	4bc9      	ldr	r3, [pc, #804]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	438a      	bics	r2, r1
 8000ea6:	621a      	str	r2, [r3, #32]
 8000ea8:	4bc7      	ldr	r3, [pc, #796]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8000eaa:	6a1a      	ldr	r2, [r3, #32]
 8000eac:	4bc6      	ldr	r3, [pc, #792]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8000eae:	2104      	movs	r1, #4
 8000eb0:	438a      	bics	r2, r1
 8000eb2:	621a      	str	r2, [r3, #32]
 8000eb4:	e01c      	b.n	8000ef0 <HAL_RCC_OscConfig+0x3a4>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	2b05      	cmp	r3, #5
 8000ebc:	d10c      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x38c>
 8000ebe:	4bc2      	ldr	r3, [pc, #776]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8000ec0:	6a1a      	ldr	r2, [r3, #32]
 8000ec2:	4bc1      	ldr	r3, [pc, #772]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8000ec4:	2104      	movs	r1, #4
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	621a      	str	r2, [r3, #32]
 8000eca:	4bbf      	ldr	r3, [pc, #764]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8000ecc:	6a1a      	ldr	r2, [r3, #32]
 8000ece:	4bbe      	ldr	r3, [pc, #760]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	621a      	str	r2, [r3, #32]
 8000ed6:	e00b      	b.n	8000ef0 <HAL_RCC_OscConfig+0x3a4>
 8000ed8:	4bbb      	ldr	r3, [pc, #748]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8000eda:	6a1a      	ldr	r2, [r3, #32]
 8000edc:	4bba      	ldr	r3, [pc, #744]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8000ede:	2101      	movs	r1, #1
 8000ee0:	438a      	bics	r2, r1
 8000ee2:	621a      	str	r2, [r3, #32]
 8000ee4:	4bb8      	ldr	r3, [pc, #736]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8000ee6:	6a1a      	ldr	r2, [r3, #32]
 8000ee8:	4bb7      	ldr	r3, [pc, #732]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8000eea:	2104      	movs	r1, #4
 8000eec:	438a      	bics	r2, r1
 8000eee:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d014      	beq.n	8000f22 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef8:	f7ff fbe4 	bl	80006c4 <HAL_GetTick>
 8000efc:	0003      	movs	r3, r0
 8000efe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f00:	e009      	b.n	8000f16 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f02:	f7ff fbdf 	bl	80006c4 <HAL_GetTick>
 8000f06:	0002      	movs	r2, r0
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	4aaf      	ldr	r2, [pc, #700]	; (80011cc <HAL_RCC_OscConfig+0x680>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d901      	bls.n	8000f16 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8000f12:	2303      	movs	r3, #3
 8000f14:	e19a      	b.n	800124c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f16:	4bac      	ldr	r3, [pc, #688]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8000f18:	6a1b      	ldr	r3, [r3, #32]
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	d0f0      	beq.n	8000f02 <HAL_RCC_OscConfig+0x3b6>
 8000f20:	e013      	b.n	8000f4a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f22:	f7ff fbcf 	bl	80006c4 <HAL_GetTick>
 8000f26:	0003      	movs	r3, r0
 8000f28:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f2a:	e009      	b.n	8000f40 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f2c:	f7ff fbca 	bl	80006c4 <HAL_GetTick>
 8000f30:	0002      	movs	r2, r0
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	4aa5      	ldr	r2, [pc, #660]	; (80011cc <HAL_RCC_OscConfig+0x680>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d901      	bls.n	8000f40 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e185      	b.n	800124c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f40:	4ba1      	ldr	r3, [pc, #644]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8000f42:	6a1b      	ldr	r3, [r3, #32]
 8000f44:	2202      	movs	r2, #2
 8000f46:	4013      	ands	r3, r2
 8000f48:	d1f0      	bne.n	8000f2c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f4a:	231f      	movs	r3, #31
 8000f4c:	18fb      	adds	r3, r7, r3
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d105      	bne.n	8000f60 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f54:	4b9c      	ldr	r3, [pc, #624]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8000f56:	69da      	ldr	r2, [r3, #28]
 8000f58:	4b9b      	ldr	r3, [pc, #620]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8000f5a:	499d      	ldr	r1, [pc, #628]	; (80011d0 <HAL_RCC_OscConfig+0x684>)
 8000f5c:	400a      	ands	r2, r1
 8000f5e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2210      	movs	r2, #16
 8000f66:	4013      	ands	r3, r2
 8000f68:	d063      	beq.n	8001032 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d12a      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f72:	4b95      	ldr	r3, [pc, #596]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8000f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f76:	4b94      	ldr	r3, [pc, #592]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8000f78:	2104      	movs	r1, #4
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000f7e:	4b92      	ldr	r3, [pc, #584]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8000f80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f82:	4b91      	ldr	r3, [pc, #580]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8000f84:	2101      	movs	r1, #1
 8000f86:	430a      	orrs	r2, r1
 8000f88:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f8a:	f7ff fb9b 	bl	80006c4 <HAL_GetTick>
 8000f8e:	0003      	movs	r3, r0
 8000f90:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000f92:	e008      	b.n	8000fa6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000f94:	f7ff fb96 	bl	80006c4 <HAL_GetTick>
 8000f98:	0002      	movs	r2, r0
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e152      	b.n	800124c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000fa6:	4b88      	ldr	r3, [pc, #544]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8000fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000faa:	2202      	movs	r2, #2
 8000fac:	4013      	ands	r3, r2
 8000fae:	d0f1      	beq.n	8000f94 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000fb0:	4b85      	ldr	r3, [pc, #532]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8000fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb4:	22f8      	movs	r2, #248	; 0xf8
 8000fb6:	4393      	bics	r3, r2
 8000fb8:	0019      	movs	r1, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	00da      	lsls	r2, r3, #3
 8000fc0:	4b81      	ldr	r3, [pc, #516]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	635a      	str	r2, [r3, #52]	; 0x34
 8000fc6:	e034      	b.n	8001032 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	3305      	adds	r3, #5
 8000fce:	d111      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000fd0:	4b7d      	ldr	r3, [pc, #500]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8000fd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fd4:	4b7c      	ldr	r3, [pc, #496]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8000fd6:	2104      	movs	r1, #4
 8000fd8:	438a      	bics	r2, r1
 8000fda:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000fdc:	4b7a      	ldr	r3, [pc, #488]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8000fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe0:	22f8      	movs	r2, #248	; 0xf8
 8000fe2:	4393      	bics	r3, r2
 8000fe4:	0019      	movs	r1, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	00da      	lsls	r2, r3, #3
 8000fec:	4b76      	ldr	r3, [pc, #472]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ff2:	e01e      	b.n	8001032 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ff4:	4b74      	ldr	r3, [pc, #464]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8000ff6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ff8:	4b73      	ldr	r3, [pc, #460]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8000ffa:	2104      	movs	r1, #4
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001000:	4b71      	ldr	r3, [pc, #452]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8001002:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001004:	4b70      	ldr	r3, [pc, #448]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8001006:	2101      	movs	r1, #1
 8001008:	438a      	bics	r2, r1
 800100a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800100c:	f7ff fb5a 	bl	80006c4 <HAL_GetTick>
 8001010:	0003      	movs	r3, r0
 8001012:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001014:	e008      	b.n	8001028 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001016:	f7ff fb55 	bl	80006c4 <HAL_GetTick>
 800101a:	0002      	movs	r2, r0
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e111      	b.n	800124c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001028:	4b67      	ldr	r3, [pc, #412]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 800102a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800102c:	2202      	movs	r2, #2
 800102e:	4013      	ands	r3, r2
 8001030:	d1f1      	bne.n	8001016 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2220      	movs	r2, #32
 8001038:	4013      	ands	r3, r2
 800103a:	d05c      	beq.n	80010f6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800103c:	4b62      	ldr	r3, [pc, #392]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	220c      	movs	r2, #12
 8001042:	4013      	ands	r3, r2
 8001044:	2b0c      	cmp	r3, #12
 8001046:	d00e      	beq.n	8001066 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001048:	4b5f      	ldr	r3, [pc, #380]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	220c      	movs	r2, #12
 800104e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001050:	2b08      	cmp	r3, #8
 8001052:	d114      	bne.n	800107e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001054:	4b5c      	ldr	r3, [pc, #368]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	23c0      	movs	r3, #192	; 0xc0
 800105a:	025b      	lsls	r3, r3, #9
 800105c:	401a      	ands	r2, r3
 800105e:	23c0      	movs	r3, #192	; 0xc0
 8001060:	025b      	lsls	r3, r3, #9
 8001062:	429a      	cmp	r2, r3
 8001064:	d10b      	bne.n	800107e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001066:	4b58      	ldr	r3, [pc, #352]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8001068:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800106a:	2380      	movs	r3, #128	; 0x80
 800106c:	025b      	lsls	r3, r3, #9
 800106e:	4013      	ands	r3, r2
 8001070:	d040      	beq.n	80010f4 <HAL_RCC_OscConfig+0x5a8>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a1b      	ldr	r3, [r3, #32]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d03c      	beq.n	80010f4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e0e6      	b.n	800124c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a1b      	ldr	r3, [r3, #32]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d01b      	beq.n	80010be <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001086:	4b50      	ldr	r3, [pc, #320]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8001088:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800108a:	4b4f      	ldr	r3, [pc, #316]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 800108c:	2180      	movs	r1, #128	; 0x80
 800108e:	0249      	lsls	r1, r1, #9
 8001090:	430a      	orrs	r2, r1
 8001092:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001094:	f7ff fb16 	bl	80006c4 <HAL_GetTick>
 8001098:	0003      	movs	r3, r0
 800109a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800109c:	e008      	b.n	80010b0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800109e:	f7ff fb11 	bl	80006c4 <HAL_GetTick>
 80010a2:	0002      	movs	r2, r0
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d901      	bls.n	80010b0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e0cd      	b.n	800124c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80010b0:	4b45      	ldr	r3, [pc, #276]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 80010b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010b4:	2380      	movs	r3, #128	; 0x80
 80010b6:	025b      	lsls	r3, r3, #9
 80010b8:	4013      	ands	r3, r2
 80010ba:	d0f0      	beq.n	800109e <HAL_RCC_OscConfig+0x552>
 80010bc:	e01b      	b.n	80010f6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80010be:	4b42      	ldr	r3, [pc, #264]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 80010c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010c2:	4b41      	ldr	r3, [pc, #260]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 80010c4:	4943      	ldr	r1, [pc, #268]	; (80011d4 <HAL_RCC_OscConfig+0x688>)
 80010c6:	400a      	ands	r2, r1
 80010c8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ca:	f7ff fafb 	bl	80006c4 <HAL_GetTick>
 80010ce:	0003      	movs	r3, r0
 80010d0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80010d4:	f7ff faf6 	bl	80006c4 <HAL_GetTick>
 80010d8:	0002      	movs	r2, r0
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e0b2      	b.n	800124c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80010e6:	4b38      	ldr	r3, [pc, #224]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 80010e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	025b      	lsls	r3, r3, #9
 80010ee:	4013      	ands	r3, r2
 80010f0:	d1f0      	bne.n	80010d4 <HAL_RCC_OscConfig+0x588>
 80010f2:	e000      	b.n	80010f6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80010f4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d100      	bne.n	8001100 <HAL_RCC_OscConfig+0x5b4>
 80010fe:	e0a4      	b.n	800124a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001100:	4b31      	ldr	r3, [pc, #196]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	220c      	movs	r2, #12
 8001106:	4013      	ands	r3, r2
 8001108:	2b08      	cmp	r3, #8
 800110a:	d100      	bne.n	800110e <HAL_RCC_OscConfig+0x5c2>
 800110c:	e078      	b.n	8001200 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001112:	2b02      	cmp	r3, #2
 8001114:	d14c      	bne.n	80011b0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001116:	4b2c      	ldr	r3, [pc, #176]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 800111c:	492e      	ldr	r1, [pc, #184]	; (80011d8 <HAL_RCC_OscConfig+0x68c>)
 800111e:	400a      	ands	r2, r1
 8001120:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001122:	f7ff facf 	bl	80006c4 <HAL_GetTick>
 8001126:	0003      	movs	r3, r0
 8001128:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800112c:	f7ff faca 	bl	80006c4 <HAL_GetTick>
 8001130:	0002      	movs	r2, r0
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e086      	b.n	800124c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800113e:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	2380      	movs	r3, #128	; 0x80
 8001144:	049b      	lsls	r3, r3, #18
 8001146:	4013      	ands	r3, r2
 8001148:	d1f0      	bne.n	800112c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800114a:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 800114c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114e:	220f      	movs	r2, #15
 8001150:	4393      	bics	r3, r2
 8001152:	0019      	movs	r1, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001158:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 800115a:	430a      	orrs	r2, r1
 800115c:	62da      	str	r2, [r3, #44]	; 0x2c
 800115e:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	4a1e      	ldr	r2, [pc, #120]	; (80011dc <HAL_RCC_OscConfig+0x690>)
 8001164:	4013      	ands	r3, r2
 8001166:	0019      	movs	r1, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001170:	431a      	orrs	r2, r3
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 8001174:	430a      	orrs	r2, r1
 8001176:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001178:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 800117e:	2180      	movs	r1, #128	; 0x80
 8001180:	0449      	lsls	r1, r1, #17
 8001182:	430a      	orrs	r2, r1
 8001184:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001186:	f7ff fa9d 	bl	80006c4 <HAL_GetTick>
 800118a:	0003      	movs	r3, r0
 800118c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001190:	f7ff fa98 	bl	80006c4 <HAL_GetTick>
 8001194:	0002      	movs	r2, r0
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e054      	b.n	800124c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	2380      	movs	r3, #128	; 0x80
 80011a8:	049b      	lsls	r3, r3, #18
 80011aa:	4013      	ands	r3, r2
 80011ac:	d0f0      	beq.n	8001190 <HAL_RCC_OscConfig+0x644>
 80011ae:	e04c      	b.n	800124a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <HAL_RCC_OscConfig+0x67c>)
 80011b6:	4908      	ldr	r1, [pc, #32]	; (80011d8 <HAL_RCC_OscConfig+0x68c>)
 80011b8:	400a      	ands	r2, r1
 80011ba:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011bc:	f7ff fa82 	bl	80006c4 <HAL_GetTick>
 80011c0:	0003      	movs	r3, r0
 80011c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011c4:	e015      	b.n	80011f2 <HAL_RCC_OscConfig+0x6a6>
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	40021000 	.word	0x40021000
 80011cc:	00001388 	.word	0x00001388
 80011d0:	efffffff 	.word	0xefffffff
 80011d4:	fffeffff 	.word	0xfffeffff
 80011d8:	feffffff 	.word	0xfeffffff
 80011dc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011e0:	f7ff fa70 	bl	80006c4 <HAL_GetTick>
 80011e4:	0002      	movs	r2, r0
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e02c      	b.n	800124c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011f2:	4b18      	ldr	r3, [pc, #96]	; (8001254 <HAL_RCC_OscConfig+0x708>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	2380      	movs	r3, #128	; 0x80
 80011f8:	049b      	lsls	r3, r3, #18
 80011fa:	4013      	ands	r3, r2
 80011fc:	d1f0      	bne.n	80011e0 <HAL_RCC_OscConfig+0x694>
 80011fe:	e024      	b.n	800124a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001204:	2b01      	cmp	r3, #1
 8001206:	d101      	bne.n	800120c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e01f      	b.n	800124c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <HAL_RCC_OscConfig+0x708>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <HAL_RCC_OscConfig+0x708>)
 8001214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001216:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	23c0      	movs	r3, #192	; 0xc0
 800121c:	025b      	lsls	r3, r3, #9
 800121e:	401a      	ands	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001224:	429a      	cmp	r2, r3
 8001226:	d10e      	bne.n	8001246 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	220f      	movs	r2, #15
 800122c:	401a      	ands	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001232:	429a      	cmp	r2, r3
 8001234:	d107      	bne.n	8001246 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	23f0      	movs	r3, #240	; 0xf0
 800123a:	039b      	lsls	r3, r3, #14
 800123c:	401a      	ands	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001242:	429a      	cmp	r2, r3
 8001244:	d001      	beq.n	800124a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e000      	b.n	800124c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800124a:	2300      	movs	r3, #0
}
 800124c:	0018      	movs	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	b008      	add	sp, #32
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40021000 	.word	0x40021000

08001258 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e0bf      	b.n	80013ec <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800126c:	4b61      	ldr	r3, [pc, #388]	; (80013f4 <HAL_RCC_ClockConfig+0x19c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2201      	movs	r2, #1
 8001272:	4013      	ands	r3, r2
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	429a      	cmp	r2, r3
 8001278:	d911      	bls.n	800129e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800127a:	4b5e      	ldr	r3, [pc, #376]	; (80013f4 <HAL_RCC_ClockConfig+0x19c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2201      	movs	r2, #1
 8001280:	4393      	bics	r3, r2
 8001282:	0019      	movs	r1, r3
 8001284:	4b5b      	ldr	r3, [pc, #364]	; (80013f4 <HAL_RCC_ClockConfig+0x19c>)
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	430a      	orrs	r2, r1
 800128a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800128c:	4b59      	ldr	r3, [pc, #356]	; (80013f4 <HAL_RCC_ClockConfig+0x19c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2201      	movs	r2, #1
 8001292:	4013      	ands	r3, r2
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	429a      	cmp	r2, r3
 8001298:	d001      	beq.n	800129e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e0a6      	b.n	80013ec <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2202      	movs	r2, #2
 80012a4:	4013      	ands	r3, r2
 80012a6:	d015      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2204      	movs	r2, #4
 80012ae:	4013      	ands	r3, r2
 80012b0:	d006      	beq.n	80012c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80012b2:	4b51      	ldr	r3, [pc, #324]	; (80013f8 <HAL_RCC_ClockConfig+0x1a0>)
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	4b50      	ldr	r3, [pc, #320]	; (80013f8 <HAL_RCC_ClockConfig+0x1a0>)
 80012b8:	21e0      	movs	r1, #224	; 0xe0
 80012ba:	00c9      	lsls	r1, r1, #3
 80012bc:	430a      	orrs	r2, r1
 80012be:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012c0:	4b4d      	ldr	r3, [pc, #308]	; (80013f8 <HAL_RCC_ClockConfig+0x1a0>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	22f0      	movs	r2, #240	; 0xf0
 80012c6:	4393      	bics	r3, r2
 80012c8:	0019      	movs	r1, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	4b4a      	ldr	r3, [pc, #296]	; (80013f8 <HAL_RCC_ClockConfig+0x1a0>)
 80012d0:	430a      	orrs	r2, r1
 80012d2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2201      	movs	r2, #1
 80012da:	4013      	ands	r3, r2
 80012dc:	d04c      	beq.n	8001378 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d107      	bne.n	80012f6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e6:	4b44      	ldr	r3, [pc, #272]	; (80013f8 <HAL_RCC_ClockConfig+0x1a0>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	029b      	lsls	r3, r3, #10
 80012ee:	4013      	ands	r3, r2
 80012f0:	d120      	bne.n	8001334 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e07a      	b.n	80013ec <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d107      	bne.n	800130e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012fe:	4b3e      	ldr	r3, [pc, #248]	; (80013f8 <HAL_RCC_ClockConfig+0x1a0>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	049b      	lsls	r3, r3, #18
 8001306:	4013      	ands	r3, r2
 8001308:	d114      	bne.n	8001334 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e06e      	b.n	80013ec <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b03      	cmp	r3, #3
 8001314:	d107      	bne.n	8001326 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001316:	4b38      	ldr	r3, [pc, #224]	; (80013f8 <HAL_RCC_ClockConfig+0x1a0>)
 8001318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	025b      	lsls	r3, r3, #9
 800131e:	4013      	ands	r3, r2
 8001320:	d108      	bne.n	8001334 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e062      	b.n	80013ec <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001326:	4b34      	ldr	r3, [pc, #208]	; (80013f8 <HAL_RCC_ClockConfig+0x1a0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2202      	movs	r2, #2
 800132c:	4013      	ands	r3, r2
 800132e:	d101      	bne.n	8001334 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e05b      	b.n	80013ec <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001334:	4b30      	ldr	r3, [pc, #192]	; (80013f8 <HAL_RCC_ClockConfig+0x1a0>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2203      	movs	r2, #3
 800133a:	4393      	bics	r3, r2
 800133c:	0019      	movs	r1, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	4b2d      	ldr	r3, [pc, #180]	; (80013f8 <HAL_RCC_ClockConfig+0x1a0>)
 8001344:	430a      	orrs	r2, r1
 8001346:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001348:	f7ff f9bc 	bl	80006c4 <HAL_GetTick>
 800134c:	0003      	movs	r3, r0
 800134e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001350:	e009      	b.n	8001366 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001352:	f7ff f9b7 	bl	80006c4 <HAL_GetTick>
 8001356:	0002      	movs	r2, r0
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	4a27      	ldr	r2, [pc, #156]	; (80013fc <HAL_RCC_ClockConfig+0x1a4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e042      	b.n	80013ec <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001366:	4b24      	ldr	r3, [pc, #144]	; (80013f8 <HAL_RCC_ClockConfig+0x1a0>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	220c      	movs	r2, #12
 800136c:	401a      	ands	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	429a      	cmp	r2, r3
 8001376:	d1ec      	bne.n	8001352 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001378:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <HAL_RCC_ClockConfig+0x19c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2201      	movs	r2, #1
 800137e:	4013      	ands	r3, r2
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	429a      	cmp	r2, r3
 8001384:	d211      	bcs.n	80013aa <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001386:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <HAL_RCC_ClockConfig+0x19c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2201      	movs	r2, #1
 800138c:	4393      	bics	r3, r2
 800138e:	0019      	movs	r1, r3
 8001390:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <HAL_RCC_ClockConfig+0x19c>)
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	430a      	orrs	r2, r1
 8001396:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001398:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <HAL_RCC_ClockConfig+0x19c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2201      	movs	r2, #1
 800139e:	4013      	ands	r3, r2
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d001      	beq.n	80013aa <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e020      	b.n	80013ec <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2204      	movs	r2, #4
 80013b0:	4013      	ands	r3, r2
 80013b2:	d009      	beq.n	80013c8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80013b4:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <HAL_RCC_ClockConfig+0x1a0>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	4a11      	ldr	r2, [pc, #68]	; (8001400 <HAL_RCC_ClockConfig+0x1a8>)
 80013ba:	4013      	ands	r3, r2
 80013bc:	0019      	movs	r1, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68da      	ldr	r2, [r3, #12]
 80013c2:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <HAL_RCC_ClockConfig+0x1a0>)
 80013c4:	430a      	orrs	r2, r1
 80013c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80013c8:	f000 f820 	bl	800140c <HAL_RCC_GetSysClockFreq>
 80013cc:	0001      	movs	r1, r0
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <HAL_RCC_ClockConfig+0x1a0>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	091b      	lsrs	r3, r3, #4
 80013d4:	220f      	movs	r2, #15
 80013d6:	4013      	ands	r3, r2
 80013d8:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <HAL_RCC_ClockConfig+0x1ac>)
 80013da:	5cd3      	ldrb	r3, [r2, r3]
 80013dc:	000a      	movs	r2, r1
 80013de:	40da      	lsrs	r2, r3
 80013e0:	4b09      	ldr	r3, [pc, #36]	; (8001408 <HAL_RCC_ClockConfig+0x1b0>)
 80013e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80013e4:	2000      	movs	r0, #0
 80013e6:	f7ff f927 	bl	8000638 <HAL_InitTick>
  
  return HAL_OK;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	0018      	movs	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	b004      	add	sp, #16
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40022000 	.word	0x40022000
 80013f8:	40021000 	.word	0x40021000
 80013fc:	00001388 	.word	0x00001388
 8001400:	fffff8ff 	.word	0xfffff8ff
 8001404:	08001c90 	.word	0x08001c90
 8001408:	20000000 	.word	0x20000000

0800140c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b08f      	sub	sp, #60	; 0x3c
 8001410:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001412:	2314      	movs	r3, #20
 8001414:	18fb      	adds	r3, r7, r3
 8001416:	4a37      	ldr	r2, [pc, #220]	; (80014f4 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001418:	ca13      	ldmia	r2!, {r0, r1, r4}
 800141a:	c313      	stmia	r3!, {r0, r1, r4}
 800141c:	6812      	ldr	r2, [r2, #0]
 800141e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	4a35      	ldr	r2, [pc, #212]	; (80014f8 <HAL_RCC_GetSysClockFreq+0xec>)
 8001424:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001426:	c313      	stmia	r3!, {r0, r1, r4}
 8001428:	6812      	ldr	r2, [r2, #0]
 800142a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001430:	2300      	movs	r3, #0
 8001432:	62bb      	str	r3, [r7, #40]	; 0x28
 8001434:	2300      	movs	r3, #0
 8001436:	637b      	str	r3, [r7, #52]	; 0x34
 8001438:	2300      	movs	r3, #0
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800143c:	2300      	movs	r3, #0
 800143e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001440:	4b2e      	ldr	r3, [pc, #184]	; (80014fc <HAL_RCC_GetSysClockFreq+0xf0>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001448:	220c      	movs	r2, #12
 800144a:	4013      	ands	r3, r2
 800144c:	2b08      	cmp	r3, #8
 800144e:	d006      	beq.n	800145e <HAL_RCC_GetSysClockFreq+0x52>
 8001450:	2b0c      	cmp	r3, #12
 8001452:	d043      	beq.n	80014dc <HAL_RCC_GetSysClockFreq+0xd0>
 8001454:	2b04      	cmp	r3, #4
 8001456:	d144      	bne.n	80014e2 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001458:	4b29      	ldr	r3, [pc, #164]	; (8001500 <HAL_RCC_GetSysClockFreq+0xf4>)
 800145a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800145c:	e044      	b.n	80014e8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800145e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001460:	0c9b      	lsrs	r3, r3, #18
 8001462:	220f      	movs	r2, #15
 8001464:	4013      	ands	r3, r2
 8001466:	2214      	movs	r2, #20
 8001468:	18ba      	adds	r2, r7, r2
 800146a:	5cd3      	ldrb	r3, [r2, r3]
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800146e:	4b23      	ldr	r3, [pc, #140]	; (80014fc <HAL_RCC_GetSysClockFreq+0xf0>)
 8001470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001472:	220f      	movs	r2, #15
 8001474:	4013      	ands	r3, r2
 8001476:	1d3a      	adds	r2, r7, #4
 8001478:	5cd3      	ldrb	r3, [r2, r3]
 800147a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800147c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800147e:	23c0      	movs	r3, #192	; 0xc0
 8001480:	025b      	lsls	r3, r3, #9
 8001482:	401a      	ands	r2, r3
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	025b      	lsls	r3, r3, #9
 8001488:	429a      	cmp	r2, r3
 800148a:	d109      	bne.n	80014a0 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800148c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800148e:	481c      	ldr	r0, [pc, #112]	; (8001500 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001490:	f7fe fe3a 	bl	8000108 <__udivsi3>
 8001494:	0003      	movs	r3, r0
 8001496:	001a      	movs	r2, r3
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	4353      	muls	r3, r2
 800149c:	637b      	str	r3, [r7, #52]	; 0x34
 800149e:	e01a      	b.n	80014d6 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80014a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014a2:	23c0      	movs	r3, #192	; 0xc0
 80014a4:	025b      	lsls	r3, r3, #9
 80014a6:	401a      	ands	r2, r3
 80014a8:	23c0      	movs	r3, #192	; 0xc0
 80014aa:	025b      	lsls	r3, r3, #9
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d109      	bne.n	80014c4 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80014b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014b2:	4814      	ldr	r0, [pc, #80]	; (8001504 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014b4:	f7fe fe28 	bl	8000108 <__udivsi3>
 80014b8:	0003      	movs	r3, r0
 80014ba:	001a      	movs	r2, r3
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	4353      	muls	r3, r2
 80014c0:	637b      	str	r3, [r7, #52]	; 0x34
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80014c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014c6:	4810      	ldr	r0, [pc, #64]	; (8001508 <HAL_RCC_GetSysClockFreq+0xfc>)
 80014c8:	f7fe fe1e 	bl	8000108 <__udivsi3>
 80014cc:	0003      	movs	r3, r0
 80014ce:	001a      	movs	r2, r3
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	4353      	muls	r3, r2
 80014d4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80014d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014d8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014da:	e005      	b.n	80014e8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014e0:	e002      	b.n	80014e8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <HAL_RCC_GetSysClockFreq+0xfc>)
 80014e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014e6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80014e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80014ea:	0018      	movs	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b00f      	add	sp, #60	; 0x3c
 80014f0:	bd90      	pop	{r4, r7, pc}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	08001c70 	.word	0x08001c70
 80014f8:	08001c80 	.word	0x08001c80
 80014fc:	40021000 	.word	0x40021000
 8001500:	00b71b00 	.word	0x00b71b00
 8001504:	02dc6c00 	.word	0x02dc6c00
 8001508:	007a1200 	.word	0x007a1200

0800150c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e0a8      	b.n	8001670 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001522:	2b00      	cmp	r3, #0
 8001524:	d109      	bne.n	800153a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	2382      	movs	r3, #130	; 0x82
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	429a      	cmp	r2, r3
 8001530:	d009      	beq.n	8001546 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	61da      	str	r2, [r3, #28]
 8001538:	e005      	b.n	8001546 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	225d      	movs	r2, #93	; 0x5d
 8001550:	5c9b      	ldrb	r3, [r3, r2]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	d107      	bne.n	8001568 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	225c      	movs	r2, #92	; 0x5c
 800155c:	2100      	movs	r1, #0
 800155e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	0018      	movs	r0, r3
 8001564:	f7fe ff92 	bl	800048c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	225d      	movs	r2, #93	; 0x5d
 800156c:	2102      	movs	r1, #2
 800156e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2140      	movs	r1, #64	; 0x40
 800157c:	438a      	bics	r2, r1
 800157e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68da      	ldr	r2, [r3, #12]
 8001584:	23e0      	movs	r3, #224	; 0xe0
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	429a      	cmp	r2, r3
 800158a:	d902      	bls.n	8001592 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	e002      	b.n	8001598 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001592:	2380      	movs	r3, #128	; 0x80
 8001594:	015b      	lsls	r3, r3, #5
 8001596:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68da      	ldr	r2, [r3, #12]
 800159c:	23f0      	movs	r3, #240	; 0xf0
 800159e:	011b      	lsls	r3, r3, #4
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d008      	beq.n	80015b6 <HAL_SPI_Init+0xaa>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68da      	ldr	r2, [r3, #12]
 80015a8:	23e0      	movs	r3, #224	; 0xe0
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d002      	beq.n	80015b6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	2382      	movs	r3, #130	; 0x82
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	401a      	ands	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6899      	ldr	r1, [r3, #8]
 80015c4:	2384      	movs	r3, #132	; 0x84
 80015c6:	021b      	lsls	r3, r3, #8
 80015c8:	400b      	ands	r3, r1
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	2102      	movs	r1, #2
 80015d2:	400b      	ands	r3, r1
 80015d4:	431a      	orrs	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	2101      	movs	r1, #1
 80015dc:	400b      	ands	r3, r1
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6999      	ldr	r1, [r3, #24]
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	400b      	ands	r3, r1
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69db      	ldr	r3, [r3, #28]
 80015f0:	2138      	movs	r1, #56	; 0x38
 80015f2:	400b      	ands	r3, r1
 80015f4:	431a      	orrs	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	2180      	movs	r1, #128	; 0x80
 80015fc:	400b      	ands	r3, r1
 80015fe:	431a      	orrs	r2, r3
 8001600:	0011      	movs	r1, r2
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	019b      	lsls	r3, r3, #6
 800160a:	401a      	ands	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	430a      	orrs	r2, r1
 8001612:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	0c1b      	lsrs	r3, r3, #16
 800161a:	2204      	movs	r2, #4
 800161c:	401a      	ands	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001622:	2110      	movs	r1, #16
 8001624:	400b      	ands	r3, r1
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800162c:	2108      	movs	r1, #8
 800162e:	400b      	ands	r3, r1
 8001630:	431a      	orrs	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68d9      	ldr	r1, [r3, #12]
 8001636:	23f0      	movs	r3, #240	; 0xf0
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	400b      	ands	r3, r1
 800163c:	431a      	orrs	r2, r3
 800163e:	0011      	movs	r1, r2
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	2380      	movs	r3, #128	; 0x80
 8001644:	015b      	lsls	r3, r3, #5
 8001646:	401a      	ands	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	69da      	ldr	r2, [r3, #28]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4907      	ldr	r1, [pc, #28]	; (8001678 <HAL_SPI_Init+0x16c>)
 800165c:	400a      	ands	r2, r1
 800165e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	225d      	movs	r2, #93	; 0x5d
 800166a:	2101      	movs	r1, #1
 800166c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	0018      	movs	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	b004      	add	sp, #16
 8001676:	bd80      	pop	{r7, pc}
 8001678:	fffff7ff 	.word	0xfffff7ff

0800167c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	1dbb      	adds	r3, r7, #6
 800168a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800168c:	231f      	movs	r3, #31
 800168e:	18fb      	adds	r3, r7, r3
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	225c      	movs	r2, #92	; 0x5c
 8001698:	5c9b      	ldrb	r3, [r3, r2]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d101      	bne.n	80016a2 <HAL_SPI_Transmit+0x26>
 800169e:	2302      	movs	r3, #2
 80016a0:	e140      	b.n	8001924 <HAL_SPI_Transmit+0x2a8>
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	225c      	movs	r2, #92	; 0x5c
 80016a6:	2101      	movs	r1, #1
 80016a8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80016aa:	f7ff f80b 	bl	80006c4 <HAL_GetTick>
 80016ae:	0003      	movs	r3, r0
 80016b0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80016b2:	2316      	movs	r3, #22
 80016b4:	18fb      	adds	r3, r7, r3
 80016b6:	1dba      	adds	r2, r7, #6
 80016b8:	8812      	ldrh	r2, [r2, #0]
 80016ba:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	225d      	movs	r2, #93	; 0x5d
 80016c0:	5c9b      	ldrb	r3, [r3, r2]
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d004      	beq.n	80016d2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80016c8:	231f      	movs	r3, #31
 80016ca:	18fb      	adds	r3, r7, r3
 80016cc:	2202      	movs	r2, #2
 80016ce:	701a      	strb	r2, [r3, #0]
    goto error;
 80016d0:	e11d      	b.n	800190e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_SPI_Transmit+0x64>
 80016d8:	1dbb      	adds	r3, r7, #6
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d104      	bne.n	80016ea <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80016e0:	231f      	movs	r3, #31
 80016e2:	18fb      	adds	r3, r7, r3
 80016e4:	2201      	movs	r2, #1
 80016e6:	701a      	strb	r2, [r3, #0]
    goto error;
 80016e8:	e111      	b.n	800190e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	225d      	movs	r2, #93	; 0x5d
 80016ee:	2103      	movs	r1, #3
 80016f0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2200      	movs	r2, #0
 80016f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	1dba      	adds	r2, r7, #6
 8001702:	8812      	ldrh	r2, [r2, #0]
 8001704:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	1dba      	adds	r2, r7, #6
 800170a:	8812      	ldrh	r2, [r2, #0]
 800170c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2200      	movs	r2, #0
 8001712:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2244      	movs	r2, #68	; 0x44
 8001718:	2100      	movs	r1, #0
 800171a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2246      	movs	r2, #70	; 0x46
 8001720:	2100      	movs	r1, #0
 8001722:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2200      	movs	r2, #0
 8001728:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2200      	movs	r2, #0
 800172e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	2380      	movs	r3, #128	; 0x80
 8001736:	021b      	lsls	r3, r3, #8
 8001738:	429a      	cmp	r2, r3
 800173a:	d110      	bne.n	800175e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2140      	movs	r1, #64	; 0x40
 8001748:	438a      	bics	r2, r1
 800174a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2180      	movs	r1, #128	; 0x80
 8001758:	01c9      	lsls	r1, r1, #7
 800175a:	430a      	orrs	r2, r1
 800175c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2240      	movs	r2, #64	; 0x40
 8001766:	4013      	ands	r3, r2
 8001768:	2b40      	cmp	r3, #64	; 0x40
 800176a:	d007      	beq.n	800177c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2140      	movs	r1, #64	; 0x40
 8001778:	430a      	orrs	r2, r1
 800177a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	68da      	ldr	r2, [r3, #12]
 8001780:	23e0      	movs	r3, #224	; 0xe0
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	429a      	cmp	r2, r3
 8001786:	d94e      	bls.n	8001826 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d004      	beq.n	800179a <HAL_SPI_Transmit+0x11e>
 8001790:	2316      	movs	r3, #22
 8001792:	18fb      	adds	r3, r7, r3
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d13f      	bne.n	800181a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800179e:	881a      	ldrh	r2, [r3, #0]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017aa:	1c9a      	adds	r2, r3, #2
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	3b01      	subs	r3, #1
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80017be:	e02c      	b.n	800181a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	2202      	movs	r2, #2
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d112      	bne.n	80017f4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d2:	881a      	ldrh	r2, [r3, #0]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017de:	1c9a      	adds	r2, r3, #2
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	3b01      	subs	r3, #1
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80017f2:	e012      	b.n	800181a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80017f4:	f7fe ff66 	bl	80006c4 <HAL_GetTick>
 80017f8:	0002      	movs	r2, r0
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d802      	bhi.n	800180a <HAL_SPI_Transmit+0x18e>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	3301      	adds	r3, #1
 8001808:	d102      	bne.n	8001810 <HAL_SPI_Transmit+0x194>
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d104      	bne.n	800181a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8001810:	231f      	movs	r3, #31
 8001812:	18fb      	adds	r3, r7, r3
 8001814:	2203      	movs	r2, #3
 8001816:	701a      	strb	r2, [r3, #0]
          goto error;
 8001818:	e079      	b.n	800190e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800181e:	b29b      	uxth	r3, r3
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1cd      	bne.n	80017c0 <HAL_SPI_Transmit+0x144>
 8001824:	e04f      	b.n	80018c6 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d004      	beq.n	8001838 <HAL_SPI_Transmit+0x1bc>
 800182e:	2316      	movs	r3, #22
 8001830:	18fb      	adds	r3, r7, r3
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d141      	bne.n	80018bc <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	330c      	adds	r3, #12
 8001842:	7812      	ldrb	r2, [r2, #0]
 8001844:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001854:	b29b      	uxth	r3, r3
 8001856:	3b01      	subs	r3, #1
 8001858:	b29a      	uxth	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800185e:	e02d      	b.n	80018bc <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2202      	movs	r2, #2
 8001868:	4013      	ands	r3, r2
 800186a:	2b02      	cmp	r3, #2
 800186c:	d113      	bne.n	8001896 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	330c      	adds	r3, #12
 8001878:	7812      	ldrb	r2, [r2, #0]
 800187a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001880:	1c5a      	adds	r2, r3, #1
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800188a:	b29b      	uxth	r3, r3
 800188c:	3b01      	subs	r3, #1
 800188e:	b29a      	uxth	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001894:	e012      	b.n	80018bc <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001896:	f7fe ff15 	bl	80006c4 <HAL_GetTick>
 800189a:	0002      	movs	r2, r0
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d802      	bhi.n	80018ac <HAL_SPI_Transmit+0x230>
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	3301      	adds	r3, #1
 80018aa:	d102      	bne.n	80018b2 <HAL_SPI_Transmit+0x236>
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d104      	bne.n	80018bc <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80018b2:	231f      	movs	r3, #31
 80018b4:	18fb      	adds	r3, r7, r3
 80018b6:	2203      	movs	r2, #3
 80018b8:	701a      	strb	r2, [r3, #0]
          goto error;
 80018ba:	e028      	b.n	800190e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1cc      	bne.n	8001860 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	6839      	ldr	r1, [r7, #0]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	0018      	movs	r0, r3
 80018ce:	f000 f951 	bl	8001b74 <SPI_EndRxTxTransaction>
 80018d2:	1e03      	subs	r3, r0, #0
 80018d4:	d002      	beq.n	80018dc <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2220      	movs	r2, #32
 80018da:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d10a      	bne.n	80018fa <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80018e4:	2300      	movs	r3, #0
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	613b      	str	r3, [r7, #16]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d004      	beq.n	800190c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8001902:	231f      	movs	r3, #31
 8001904:	18fb      	adds	r3, r7, r3
 8001906:	2201      	movs	r2, #1
 8001908:	701a      	strb	r2, [r3, #0]
 800190a:	e000      	b.n	800190e <HAL_SPI_Transmit+0x292>
  }

error:
 800190c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	225d      	movs	r2, #93	; 0x5d
 8001912:	2101      	movs	r1, #1
 8001914:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	225c      	movs	r2, #92	; 0x5c
 800191a:	2100      	movs	r1, #0
 800191c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800191e:	231f      	movs	r3, #31
 8001920:	18fb      	adds	r3, r7, r3
 8001922:	781b      	ldrb	r3, [r3, #0]
}
 8001924:	0018      	movs	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	b008      	add	sp, #32
 800192a:	bd80      	pop	{r7, pc}

0800192c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	1dfb      	adds	r3, r7, #7
 800193a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800193c:	f7fe fec2 	bl	80006c4 <HAL_GetTick>
 8001940:	0002      	movs	r2, r0
 8001942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001944:	1a9b      	subs	r3, r3, r2
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	18d3      	adds	r3, r2, r3
 800194a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800194c:	f7fe feba 	bl	80006c4 <HAL_GetTick>
 8001950:	0003      	movs	r3, r0
 8001952:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001954:	4b3a      	ldr	r3, [pc, #232]	; (8001a40 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	015b      	lsls	r3, r3, #5
 800195a:	0d1b      	lsrs	r3, r3, #20
 800195c:	69fa      	ldr	r2, [r7, #28]
 800195e:	4353      	muls	r3, r2
 8001960:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001962:	e058      	b.n	8001a16 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	3301      	adds	r3, #1
 8001968:	d055      	beq.n	8001a16 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800196a:	f7fe feab 	bl	80006c4 <HAL_GetTick>
 800196e:	0002      	movs	r2, r0
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	69fa      	ldr	r2, [r7, #28]
 8001976:	429a      	cmp	r2, r3
 8001978:	d902      	bls.n	8001980 <SPI_WaitFlagStateUntilTimeout+0x54>
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d142      	bne.n	8001a06 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	21e0      	movs	r1, #224	; 0xe0
 800198c:	438a      	bics	r2, r1
 800198e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	2382      	movs	r3, #130	; 0x82
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	429a      	cmp	r2, r3
 800199a:	d113      	bne.n	80019c4 <SPI_WaitFlagStateUntilTimeout+0x98>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	021b      	lsls	r3, r3, #8
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d005      	beq.n	80019b4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d107      	bne.n	80019c4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2140      	movs	r1, #64	; 0x40
 80019c0:	438a      	bics	r2, r1
 80019c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	019b      	lsls	r3, r3, #6
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d110      	bne.n	80019f2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	491a      	ldr	r1, [pc, #104]	; (8001a44 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80019dc:	400a      	ands	r2, r1
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2180      	movs	r1, #128	; 0x80
 80019ec:	0189      	lsls	r1, r1, #6
 80019ee:	430a      	orrs	r2, r1
 80019f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	225d      	movs	r2, #93	; 0x5d
 80019f6:	2101      	movs	r1, #1
 80019f8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	225c      	movs	r2, #92	; 0x5c
 80019fe:	2100      	movs	r1, #0
 8001a00:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e017      	b.n	8001a36 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	68ba      	ldr	r2, [r7, #8]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	425a      	negs	r2, r3
 8001a26:	4153      	adcs	r3, r2
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	001a      	movs	r2, r3
 8001a2c:	1dfb      	adds	r3, r7, #7
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d197      	bne.n	8001964 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	0018      	movs	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	b008      	add	sp, #32
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	20000000 	.word	0x20000000
 8001a44:	ffffdfff 	.word	0xffffdfff

08001a48 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
 8001a54:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001a56:	f7fe fe35 	bl	80006c4 <HAL_GetTick>
 8001a5a:	0002      	movs	r2, r0
 8001a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a5e:	1a9b      	subs	r3, r3, r2
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	18d3      	adds	r3, r2, r3
 8001a64:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001a66:	f7fe fe2d 	bl	80006c4 <HAL_GetTick>
 8001a6a:	0003      	movs	r3, r0
 8001a6c:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001a6e:	4b3f      	ldr	r3, [pc, #252]	; (8001b6c <SPI_WaitFifoStateUntilTimeout+0x124>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	0013      	movs	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	189b      	adds	r3, r3, r2
 8001a78:	00da      	lsls	r2, r3, #3
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	0d1b      	lsrs	r3, r3, #20
 8001a7e:	69fa      	ldr	r2, [r7, #28]
 8001a80:	4353      	muls	r3, r2
 8001a82:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8001a84:	e064      	b.n	8001b50 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001a86:	68ba      	ldr	r2, [r7, #8]
 8001a88:	23c0      	movs	r3, #192	; 0xc0
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d106      	bne.n	8001a9e <SPI_WaitFifoStateUntilTimeout+0x56>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d103      	bne.n	8001a9e <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	330c      	adds	r3, #12
 8001a9c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	d055      	beq.n	8001b50 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001aa4:	f7fe fe0e 	bl	80006c4 <HAL_GetTick>
 8001aa8:	0002      	movs	r2, r0
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	69fa      	ldr	r2, [r7, #28]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d902      	bls.n	8001aba <SPI_WaitFifoStateUntilTimeout+0x72>
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d142      	bne.n	8001b40 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	21e0      	movs	r1, #224	; 0xe0
 8001ac6:	438a      	bics	r2, r1
 8001ac8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	2382      	movs	r3, #130	; 0x82
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d113      	bne.n	8001afe <SPI_WaitFifoStateUntilTimeout+0xb6>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	021b      	lsls	r3, r3, #8
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d005      	beq.n	8001aee <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	2380      	movs	r3, #128	; 0x80
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d107      	bne.n	8001afe <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2140      	movs	r1, #64	; 0x40
 8001afa:	438a      	bics	r2, r1
 8001afc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b02:	2380      	movs	r3, #128	; 0x80
 8001b04:	019b      	lsls	r3, r3, #6
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d110      	bne.n	8001b2c <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4916      	ldr	r1, [pc, #88]	; (8001b70 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8001b16:	400a      	ands	r2, r1
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2180      	movs	r1, #128	; 0x80
 8001b26:	0189      	lsls	r1, r1, #6
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	225d      	movs	r2, #93	; 0x5d
 8001b30:	2101      	movs	r1, #1
 8001b32:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	225c      	movs	r2, #92	; 0x5c
 8001b38:	2100      	movs	r1, #0
 8001b3a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e010      	b.n	8001b62 <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d192      	bne.n	8001a86 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	0018      	movs	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	b008      	add	sp, #32
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	ffffdfff 	.word	0xffffdfff

08001b74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af02      	add	r7, sp, #8
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001b80:	68ba      	ldr	r2, [r7, #8]
 8001b82:	23c0      	movs	r3, #192	; 0xc0
 8001b84:	0159      	lsls	r1, r3, #5
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	0013      	movs	r3, r2
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f7ff ff5a 	bl	8001a48 <SPI_WaitFifoStateUntilTimeout>
 8001b94:	1e03      	subs	r3, r0, #0
 8001b96:	d007      	beq.n	8001ba8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e027      	b.n	8001bf8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001ba8:	68ba      	ldr	r2, [r7, #8]
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	0013      	movs	r3, r2
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2180      	movs	r1, #128	; 0x80
 8001bb6:	f7ff feb9 	bl	800192c <SPI_WaitFlagStateUntilTimeout>
 8001bba:	1e03      	subs	r3, r0, #0
 8001bbc:	d007      	beq.n	8001bce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e014      	b.n	8001bf8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	23c0      	movs	r3, #192	; 0xc0
 8001bd2:	00d9      	lsls	r1, r3, #3
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	0013      	movs	r3, r2
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f7ff ff33 	bl	8001a48 <SPI_WaitFifoStateUntilTimeout>
 8001be2:	1e03      	subs	r3, r0, #0
 8001be4:	d007      	beq.n	8001bf6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bea:	2220      	movs	r2, #32
 8001bec:	431a      	orrs	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e000      	b.n	8001bf8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b004      	add	sp, #16
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <__libc_init_array>:
 8001c00:	b570      	push	{r4, r5, r6, lr}
 8001c02:	2600      	movs	r6, #0
 8001c04:	4d0c      	ldr	r5, [pc, #48]	; (8001c38 <__libc_init_array+0x38>)
 8001c06:	4c0d      	ldr	r4, [pc, #52]	; (8001c3c <__libc_init_array+0x3c>)
 8001c08:	1b64      	subs	r4, r4, r5
 8001c0a:	10a4      	asrs	r4, r4, #2
 8001c0c:	42a6      	cmp	r6, r4
 8001c0e:	d109      	bne.n	8001c24 <__libc_init_array+0x24>
 8001c10:	2600      	movs	r6, #0
 8001c12:	f000 f821 	bl	8001c58 <_init>
 8001c16:	4d0a      	ldr	r5, [pc, #40]	; (8001c40 <__libc_init_array+0x40>)
 8001c18:	4c0a      	ldr	r4, [pc, #40]	; (8001c44 <__libc_init_array+0x44>)
 8001c1a:	1b64      	subs	r4, r4, r5
 8001c1c:	10a4      	asrs	r4, r4, #2
 8001c1e:	42a6      	cmp	r6, r4
 8001c20:	d105      	bne.n	8001c2e <__libc_init_array+0x2e>
 8001c22:	bd70      	pop	{r4, r5, r6, pc}
 8001c24:	00b3      	lsls	r3, r6, #2
 8001c26:	58eb      	ldr	r3, [r5, r3]
 8001c28:	4798      	blx	r3
 8001c2a:	3601      	adds	r6, #1
 8001c2c:	e7ee      	b.n	8001c0c <__libc_init_array+0xc>
 8001c2e:	00b3      	lsls	r3, r6, #2
 8001c30:	58eb      	ldr	r3, [r5, r3]
 8001c32:	4798      	blx	r3
 8001c34:	3601      	adds	r6, #1
 8001c36:	e7f2      	b.n	8001c1e <__libc_init_array+0x1e>
 8001c38:	08001ca0 	.word	0x08001ca0
 8001c3c:	08001ca0 	.word	0x08001ca0
 8001c40:	08001ca0 	.word	0x08001ca0
 8001c44:	08001ca4 	.word	0x08001ca4

08001c48 <memset>:
 8001c48:	0003      	movs	r3, r0
 8001c4a:	1812      	adds	r2, r2, r0
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d100      	bne.n	8001c52 <memset+0xa>
 8001c50:	4770      	bx	lr
 8001c52:	7019      	strb	r1, [r3, #0]
 8001c54:	3301      	adds	r3, #1
 8001c56:	e7f9      	b.n	8001c4c <memset+0x4>

08001c58 <_init>:
 8001c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c5a:	46c0      	nop			; (mov r8, r8)
 8001c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c5e:	bc08      	pop	{r3}
 8001c60:	469e      	mov	lr, r3
 8001c62:	4770      	bx	lr

08001c64 <_fini>:
 8001c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c6a:	bc08      	pop	{r3}
 8001c6c:	469e      	mov	lr, r3
 8001c6e:	4770      	bx	lr
